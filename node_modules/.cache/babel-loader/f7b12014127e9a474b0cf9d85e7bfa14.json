{"ast":null,"code":"var _jsxFileName = \"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobListings.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport style from './JobListings.module.css';\nimport { filterJob, removeJobFilter } from '../../Actions/index';\nimport { Hint } from 'react-autocomplete-hint';\nimport JobCard from './JobCard';\nimport Loading from '../../Media/Loading.gif';\nimport wavyImage from '../../Media/wavyBorder1.jpg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JobListings({\n  jobs,\n  skills,\n  skillSelection,\n  filteredJobs,\n  filterJob,\n  removeJobFilter\n}) {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n\n  function addSkill(e) {\n    if (e.keyCode === 13) {\n      const dontRepeat = skillSelection.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n      const found = skills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n\n      if (found && !dontRepeat) {\n        setLoading(true);\n        filterJob(found);\n        e.target.value = '';\n        setLoading(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"displayFlexColumn\",\n    id: \"alignItemsCenter\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: `url(${wavyImage})`\n      },\n      id: style.mainImage,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: style.searchDiv,\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Hint, {\n          options: skills,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            onKeyDown: e => addSkill(e),\n            type: \"text\",\n            placeholder: \"Search for job skills\",\n            id: style.searchInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: skillSelection.length > 0 ? 'flex' : 'none'\n      },\n      id: style.filteredDiv,\n      children: skillSelection.map(filtered => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => removeJobFilter(filtered),\n        style: {\n          background: filtered.strongColor,\n          color: filtered.softColor\n        },\n        id: style.skillSpan,\n        children: [filtered.label, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faTimesCircle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 196\n        }, this)]\n      }, filtered.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"Loading GIF\",\n      id: style.loading,\n      src: Loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this) : skillSelection.length === 0 ? jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n      setLoading: setLoading,\n      job: job\n    }, job.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 37\n    }, this)) : filteredJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n      setLoading: setLoading,\n      job: job\n    }, job.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 45\n    }, this)), !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.endDiv,\n      id: \"giveMargin\",\n      children: [\"\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB \", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: style.end,\n        children: \"There are no more job opportunities. Please come back later!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(JobListings, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n\n_c = JobListings;\n\nfunction mapStateToProps(state) {\n  return {\n    jobs: state.jobs,\n    skills: state.allSkills,\n    skillSelection: state.jobSkillSelection,\n    filteredJobs: state.filteredJobs\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    filterJob: skill => dispatch(filterJob(skill)),\n    removeJobFilter: skill => dispatch(removeJobFilter(skill))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobListings);\n\nvar _c;\n\n$RefreshReg$(_c, \"JobListings\");","map":{"version":3,"sources":["/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobListings.jsx"],"names":["React","useState","connect","style","filterJob","removeJobFilter","Hint","JobCard","Loading","wavyImage","FontAwesomeIcon","faSearch","faTimesCircle","JobListings","jobs","skills","skillSelection","filteredJobs","loading","setLoading","addSkill","e","keyCode","dontRepeat","find","skill","label","toLowerCase","target","value","found","backgroundImage","mainImage","searchDiv","searchInput","display","length","filteredDiv","map","filtered","background","strongColor","color","softColor","skillSpan","id","job","endDiv","end","mapStateToProps","state","allSkills","jobSkillSelection","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport style from './JobListings.module.css';\nimport { filterJob, removeJobFilter } from '../../Actions/index';\nimport { Hint } from 'react-autocomplete-hint';\nimport JobCard from './JobCard';\nimport Loading from '../../Media/Loading.gif';\nimport wavyImage from '../../Media/wavyBorder1.jpg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction JobListings({ jobs, skills, skillSelection, filteredJobs, filterJob, removeJobFilter }) {\n\n    const [loading, setLoading] = useState(false);\n\n    function addSkill(e) {\n        if (e.keyCode === 13) {\n            const dontRepeat = skillSelection.find (skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n            const found = skills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n            if (found && !dontRepeat) {\n                setLoading(true);\n                filterJob(found);\n                e.target.value = '';\n                setLoading(false);\n            }\n        }\n    }\n\n    return (\n        <div className='displayFlexColumn' id='alignItemsCenter'>\n            <div style={{ backgroundImage: `url(${wavyImage})`}} id={style.mainImage}>\n                <div id={style.searchDiv}>\n                    <FontAwesomeIcon icon={faSearch} />\n                    <Hint options={skills}>\n                        <input onKeyDown={(e) => addSkill(e)} type='text' placeholder='Search for job skills' id={style.searchInput} />\n                    </Hint>\n                </div>\n            </div>\n            <div style={{ display: skillSelection.length > 0 ? 'flex' : 'none' }} id={style.filteredDiv}>\n                {skillSelection.map(filtered =>\n                    <div key={filtered.id} onClick={() => removeJobFilter(filtered)} style={{ background: filtered.strongColor, color: filtered.softColor }} id={style.skillSpan}>{filtered.label} <FontAwesomeIcon icon={faTimesCircle} /></div>\n                )}\n            </div>\n            {loading ?\n                <img alt=\"Loading GIF\" id={style.loading} src={Loading} /> :\n                skillSelection.length === 0 ?\n                    jobs.map(job => <JobCard key={job.id} setLoading={setLoading} job={job} />)\n                    :\n                    filteredJobs.map(job => <JobCard key={job.id} setLoading={setLoading} job={job} />)\n            }\n            {!loading && <div className={style.endDiv} id='giveMargin'>🧑‍💻 <span id={style.end}>There are no more job opportunities. Please come back later!</span></div>}\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        jobs: state.jobs,\n        skills: state.allSkills,\n        skillSelection: state.jobSkillSelection,\n        filteredJobs: state.filteredJobs\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        filterJob: skill => dispatch(filterJob(skill)),\n        removeJobFilter: skill => dispatch(removeJobFilter(skill))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobListings);"]},"metadata":{},"sourceType":"module"}