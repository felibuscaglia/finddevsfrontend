[{"/Users/felipebuscaglia/Henry/finddevsfrontend/src/index.js":"1","/Users/felipebuscaglia/Henry/finddevsfrontend/src/reportWebVitals.js":"2","/Users/felipebuscaglia/Henry/finddevsfrontend/src/App.js":"3","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Store/index.js":"4","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Actions/index.js":"5","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Reducers/index.js":"6","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/Footer/Footer.jsx":"7","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HeaderUser/HeaderUser.jsx":"8","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/Header/Header.jsx":"9","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/Homepage/Homepage.jsx":"10","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/PostStartup/ProjectSettings.jsx":"11","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobListings.jsx":"12","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/StartupAdminPanel/StartupAdminPanel.jsx":"13","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/UserProfile/UserProfile.jsx":"14","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/WorkersList/WorkersList.jsx":"15","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/AddJob/AddJob.jsx":"16","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobInfo/JobInfo.jsx":"17","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/NotFound/NotFound.jsx":"18","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/Suggestions/Suggestions.jsx":"19","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/PostStartup/PostStartup.jsx":"20","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/ProjectProfile/ProjectProfile.jsx":"21","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/StartupAdminPanel/JobPanel/JobPanel.jsx":"22","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/EditUser/EditUser.jsx":"23","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/SuccessPage/SuccessPage.jsx":"24","/Users/felipebuscaglia/Henry/finddevsfrontend/src/utils.js":"25","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HeaderUser/SearchBar.jsx":"26","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/PostStartup/UserSettingsCard.jsx":"27","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobCardProfile.jsx":"28","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/PopUps/RegisterPopUp.jsx":"29","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/PopUps/Confirmation.jsx":"30","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/PopUps/LoginPopUp.jsx":"31","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/GoPremiumPopUp/GoPremium.jsx":"32","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/UserCard/ProjectCard.jsx":"33","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/UserCard/UserCardSearch.jsx":"34","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/UserCard/UserCard.jsx":"35","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ProfileProjectCard/ProfileProjectCard.jsx":"36","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HirePopUp/HirePopUp.jsx":"37","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobCard.jsx":"38","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ProjectCard/ProjectCard.jsx":"39","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/ApplicantsPopUp.jsx":"40","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HirePopUp/JobCard.jsx":"41","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/MembersPopUp.jsx":"42","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/ApplicantsList.jsx":"43","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/Accepted.jsx":"44","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/ChangeRole.jsx":"45","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/TermsAndConditions/Terms.jsx":"46"},{"size":868,"mtime":1614916573334,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1608134372834,"results":"49","hashOfConfig":"48"},{"size":4166,"mtime":1615064534430,"results":"50","hashOfConfig":"48"},{"size":337,"mtime":1614306632864,"results":"51","hashOfConfig":"48"},{"size":2149,"mtime":1614744428958,"results":"52","hashOfConfig":"48"},{"size":5229,"mtime":1614822404861,"results":"53","hashOfConfig":"48"},{"size":1243,"mtime":1614910122826,"results":"54","hashOfConfig":"48"},{"size":9837,"mtime":1615038933735,"results":"55","hashOfConfig":"48"},{"size":941,"mtime":1614974483449,"results":"56","hashOfConfig":"48"},{"size":3989,"mtime":1614975049963,"results":"57","hashOfConfig":"48"},{"size":10926,"mtime":1614914154543,"results":"58","hashOfConfig":"48"},{"size":3169,"mtime":1614911474597,"results":"59","hashOfConfig":"48"},{"size":4482,"mtime":1615081440194,"results":"60","hashOfConfig":"48"},{"size":7672,"mtime":1615039095016,"results":"61","hashOfConfig":"48"},{"size":5162,"mtime":1614914825016,"results":"62","hashOfConfig":"48"},{"size":7702,"mtime":1614910876021,"results":"63","hashOfConfig":"48"},{"size":5144,"mtime":1614911238798,"results":"64","hashOfConfig":"48"},{"size":571,"mtime":1614119831311,"results":"65","hashOfConfig":"48"},{"size":3597,"mtime":1614914935981,"results":"66","hashOfConfig":"48"},{"size":10568,"mtime":1614911662237,"results":"67","hashOfConfig":"48"},{"size":6032,"mtime":1614914404525,"results":"68","hashOfConfig":"48"},{"size":3516,"mtime":1614914570124,"results":"69","hashOfConfig":"48"},{"size":13308,"mtime":1614911113359,"results":"70","hashOfConfig":"48"},{"size":1228,"mtime":1614656358102,"results":"71","hashOfConfig":"48"},{"size":1094,"mtime":1615036114034,"results":"72","hashOfConfig":"48"},{"size":613,"mtime":1614910416143,"results":"73","hashOfConfig":"48"},{"size":1296,"mtime":1614914196843,"results":"74","hashOfConfig":"48"},{"size":2126,"mtime":1614744673657,"results":"75","hashOfConfig":"48"},{"size":4915,"mtime":1614910632187,"results":"76","hashOfConfig":"48"},{"size":1758,"mtime":1614910560046,"results":"77","hashOfConfig":"48"},{"size":2994,"mtime":1614910609677,"results":"78","hashOfConfig":"48"},{"size":5432,"mtime":1614910193280,"results":"79","hashOfConfig":"48"},{"size":999,"mtime":1614822248145,"results":"80","hashOfConfig":"48"},{"size":2931,"mtime":1614910821150,"results":"81","hashOfConfig":"48"},{"size":3913,"mtime":1614910773254,"results":"82","hashOfConfig":"48"},{"size":1270,"mtime":1614656358069,"results":"83","hashOfConfig":"48"},{"size":5131,"mtime":1614910473831,"results":"84","hashOfConfig":"48"},{"size":4007,"mtime":1614911324237,"results":"85","hashOfConfig":"48"},{"size":2685,"mtime":1614910732370,"results":"86","hashOfConfig":"48"},{"size":1246,"mtime":1614744475339,"results":"87","hashOfConfig":"48"},{"size":2720,"mtime":1614910520862,"results":"88","hashOfConfig":"48"},{"size":4791,"mtime":1614910072826,"results":"89","hashOfConfig":"48"},{"size":4766,"mtime":1614909886839,"results":"90","hashOfConfig":"48"},{"size":858,"mtime":1614909277566,"results":"91","hashOfConfig":"48"},{"size":1424,"mtime":1614909973188,"results":"92","hashOfConfig":"48"},{"size":10770,"mtime":1615068547570,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1sr660w",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"96"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"96"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"96"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"96"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"96"},"/Users/felipebuscaglia/Henry/finddevsfrontend/src/index.js",[],["205","206"],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/reportWebVitals.js",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/App.js",["207"],"import React, { useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './Components/Header/Header';\nimport Homepage from './Screens/Homepage/Homepage';\nimport UserProfile from './Screens/UserProfile/UserProfile';\nimport Footer from './Components/Footer/Footer';\nimport HeaderUser from './Components/HeaderUser/HeaderUser';\nimport PostStartup from './Screens/PostStartup/PostStartup';\nimport ProjectProfile from './Screens/ProjectProfile/ProjectProfile';\nimport StartupAdminPanel from './Screens/StartupAdminPanel/StartupAdminPanel';\nimport JobPanel from './Screens/StartupAdminPanel/JobPanel/JobPanel';\nimport AddJob from './Screens/AddJob/AddJob';\nimport { connect } from 'react-redux';\nimport { setSkills, setUserInfo, setProjects, getUsers, getNotifications, getJobs } from './Actions/index';\nimport jwt from 'jsonwebtoken';\nimport JobListings from './Screens/JobListing/JobListings';\nimport SettingsPanel from './Screens/PostStartup/ProjectSettings';\nimport WorkersList from './Screens/WorkersList/WorkersList';\nimport JobInfo from './Screens/JobInfo/JobInfo';\nimport EditUser from './Screens/EditUser/EditUser';\nimport Suggestions from './Screens/Suggestions/Suggestions';\nimport NotFound from './Screens/NotFound/NotFound';\nimport SuccessPage from './Screens/SuccessPage/SuccessPage';\nimport TermsAndConditions from './Screens/TermsAndConditions/Terms';\n\nfunction App({ setGlobalSkills, setUserInfo, setProjects, getUsers, getNotifications, getJobs }) {\n\n    useEffect(() => {\n        const user = jwt.decode(JSON.parse(localStorage.getItem('user')));\n        if (user) {\n            setUserInfo(user.username);\n            getNotifications(user.username);\n        }\n        setGlobalSkills();\n        setProjects();\n        getUsers();\n        getJobs();\n    }, [])\n\n    return (\n        <div>\n            <Route exact path='/' component={Header} />\n            <Route path='/' render={({ location }) => < HeaderUser pathname={location} />} />\n            <Switch>\n                <Route exact path='/' component={Homepage} />\n                <Route exact path='/jobs' component={JobListings} />\n                <Route exact path='/user/:username' render={({ match, location }) => < UserProfile pathname={location} username={match.params.username} />} />\n                <Route exact path='/project/post' component={PostStartup} />\n                <Route exact path='/project/profile/:projectId' render={({ match }) => < ProjectProfile projectID={match.params.projectId} />} />\n                <Route exact path='/admin/panel' component={StartupAdminPanel} />\n                <Route exact path='/project/jobPanel/:projectId' render={({ match }) => < JobPanel projectID={match.params.projectId} />} />\n                <Route exact path='/project/addJob/:projectId' render={({ match }) => < AddJob projectID={match.params.projectId} />} />\n                <Route exact path='/project/settings/:projectId' render={({ match }) => <SettingsPanel projectID={match.params.projectId} />} />\n                <Route exact path='/job/info/:jobId' render={({ match }) => < JobInfo jobID={match.params.jobId} />} />\n                <Route exact path='/edit/user/me' component={EditUser} />\n                <Route exact path='/workers' component={WorkersList} />\n                <Route exact path='/suggestions' render={({ location }) => <Suggestions pathname={location} />} />\n                <Route exact path='/success' component={SuccessPage} />\n                <Route exact path='/terms' component={TermsAndConditions} />\n                <NotFound />\n            </Switch>\n            <Route exact path='/' component={Footer} />\n        </div>\n    )\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setGlobalSkills: nothing => dispatch(setSkills()),\n        setUserInfo: username => dispatch(setUserInfo(username)),\n        setProjects: nothing => dispatch(setProjects()),\n        getUsers: nothing => dispatch(getUsers()),\n        getNotifications: username => dispatch(getNotifications(username)),\n        getJobs: nothing => dispatch(getJobs())\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(App);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Store/index.js",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Actions/index.js",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Reducers/index.js",["208","209","210","211","212","213","214","215","216","217","218"],"const initialState = {\n    allSkills: [],\n    userInfo: {},\n    projects: [],\n    users: [],\n    jobs: [],\n    skillSelection: [],\n    jobSkillSelection: [],\n    filteredWorkers: [],\n    filteredJobs: [],\n    notifications: [],\n    limitOfPosts: false\n}\n\nfunction rootReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_GLOBAL_SKILLS':\n            return {\n                ...state,\n                allSkills: action.payload\n            }\n        case 'SET_USER_DATA':\n            const find = action.payload.projects.find (project => project.userXprojects.isFounder === true && !project.isDeleted && project.ownerId ===action.payload.id);\n            return {\n                ...state,\n                userInfo: action.payload,\n                limitOfPosts: find && !action.payload.isPremium ? true : false\n            }\n        case 'SET_PROJECTS':\n            return {\n                ...state,\n                projects: action.payload,\n            }\n        case 'GET_USERS':\n            return {\n                ...state,\n                users: action.payload,\n                filteredWorkers: action.payload\n            }\n        case 'GET_JOBS':\n            return {\n                ...state,\n                jobs: action.payload,\n                filteredJobs: action.payload\n            }\n        case 'REMOVE_FILTER':\n            const preFilteredSkills = state.skillSelection.filter(skill => skill.id !== action.payload.id);\n            if (preFilteredSkills.length > 0) {\n                var firstFilteredWorkers = [];\n                for (var i = 0; i < state.users.length; i++) {\n                    for (var j = 0; j < state.users[i].skills.length; j++) {\n                        if (state.users[i].skills[j].id === preFilteredSkills[0].id) firstFilteredWorkers.push(state.users[i]);\n                    }\n                }\n                for (var i = 1; i < preFilteredSkills.length; i++) {\n                    firstFilteredWorkers = firstFilteredWorkers.filter(worker => {\n                        for (var j = 0; j < worker.skills.length; j++) {\n                            if (worker.skills[j].id === preFilteredSkills[i].id) return worker;\n                        }\n                    })\n                }\n            }\n            return {\n                ...state,\n                skillSelection: preFilteredSkills,\n                filteredWorkers: preFilteredSkills.length > 0 ? firstFilteredWorkers : state.users\n            }\n\n        case 'REMOVE_JOB_FILTER':\n            const preFilteredJobSkills = state.jobSkillSelection.filter(skill => skill.id !== action.payload.id);\n            if (preFilteredJobSkills.length > 0) {\n                var firstFilteredJobs = [];\n                for (var i = 0; i < state.jobs.length; i++) {\n                    for (var j = 0; j < state.jobs[i].skills.length; j++) {\n                        if (state.jobs[i].skills[j].id === preFilteredJobSkills[0].id) firstFilteredJobs.push(state.jobs[i]);\n                    }\n                }\n                for (var i = 1; i < preFilteredJobSkills.length; i++) {\n                    firstFilteredJobs = firstFilteredJobs.filter(job => {\n                        for (var j = 0; j < job.skills.length; j++) {\n                            if (job.skills[j].id === preFilteredJobSkills[i].id) return job;\n                        }\n                    })\n                }\n            }\n            return {\n                ...state,\n                jobSkillSelection: preFilteredJobSkills,\n                filteredJobs: preFilteredJobSkills.length > 0 ? firstFilteredJobs : state.jobs\n            }\n\n        case 'SELECT_WORKERS':\n            var filteredArray = state.filteredWorkers.map(worker => {\n                for (var i = 0; i < worker.skills.length; i++) {\n                    if (worker.skills[i].label === action.payload.label) return worker;\n                }\n            });\n            filteredArray = filteredArray.filter(worker => worker !== undefined);\n            filteredArray = filteredArray.sort((a, b) => {\n                return b.isPremium - a.isPremium\n            })\n            const found = state.allSkills.find(skill => skill.id === action.payload.id);\n            return {\n                ...state,\n                filteredWorkers: filteredArray,\n                skillSelection: state.skillSelection.concat(found)\n            }\n\n        case 'FILTER_JOBS':\n            var filteredArray = state.filteredJobs.map(job => {\n                for (var i = 0; i < job.skills.length; i++) {\n                    if (job.skills[i].label === action.payload.label) return job;\n                }\n            });\n            filteredArray = filteredArray.filter(job => job !== undefined);\n            const skillFound = state.allSkills.find(skill => skill.id === action.payload.id);\n            return {\n                ...state,\n                filteredJobs: filteredArray,\n                jobSkillSelection: state.jobSkillSelection.concat(skillFound)\n            }\n\n        case 'GET_NOTIFICATIONS':\n            return {\n                ...state,\n                notifications: action.payload\n            }\n\n        default: return state\n    }\n}\n\n\nexport default rootReducer;","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/Footer/Footer.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HeaderUser/HeaderUser.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/Header/Header.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/Homepage/Homepage.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/PostStartup/ProjectSettings.jsx",["219","220","221"],"import React, { useState, useEffect } from 'react';\nimport style from './PostStartup.module.css';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { BlockPicker } from 'react-color';\nimport { getBrightness } from '../../utils';\nimport Loading from '../../Media/Loading.gif';\nimport UserCard from './UserSettingsCard';\nimport Confirmation from '../../Components/PopUps/Confirmation';\nimport { setUserInfo } from '../../Actions/index';\nimport jwt from 'jsonwebtoken';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDoorOpen, faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faProductHunt, faTwitterSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\n\nfunction ProjectSettings({ user, projectID, setUserInfo }) {\n\n    const [input, setInput] = useState({});\n    const [preview, setPreview] = useState(null);\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [firstCheck, setFirstCheck] = useState(true);\n    const [inputErrors, setInputErrors] = useState({});\n    const [btnDisabled, setDisabled] = useState(false);\n\n    async function asyncUseEffect(username) {\n        await (setUserInfo(username));\n    }\n\n    useEffect(() => {\n        if (!user.username) {\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\n            if (user) {\n                asyncUseEffect(user.username);\n            } else window.location.replace('/error');\n        }\n        axios.get(`/projects/${projectID}`)\n            .then(projectData => {\n                const userFound = projectData.data.users.find(member => member.id === user.id);\n                if (projectData.data.isDeleted || !userFound || !userFound.userXprojects.isFounder) window.location.replace('/error');\n                setPreview(projectData.data.logo)\n                setInput(projectData.data);\n                setTimeout(() => {\n                    setFirstCheck(false);\n                }, 2000)\n            })\n            .catch(err => console.log(err))\n    }, [])\n\n    function handleInputChange(e) {\n        var copyOfErrors = inputErrors;\n        var noErrors = true;\n\n        if (e.hex) return setInput({ ...input, mainColor: e.hex });\n\n        if (e.target.name === 'website' || e.target.name === 'workZone' || e.target.name === 'productHunt' || e.target.name === 'twitter' || e.target.name === 'linkedIn') {\n            if (!/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(e.target.value)) copyOfErrors = { ...copyOfErrors, [e.target.name]: true };\n            else copyOfErrors = { ...copyOfErrors, [e.target.name]: false }\n        }\n\n        for (const key in copyOfErrors) if (copyOfErrors[key]) noErrors = false;\n\n        if (noErrors) setDisabled(false);\n        else setDisabled(true);\n\n        setInputErrors(copyOfErrors);\n\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function handleSubmit() {\n        setLoading(true);\n        if (input.name === '') {\n            setError(true);\n            setLoading(false);\n            return;\n        }\n        input.brightness = getBrightness(input.mainColor);\n        axios.patch(`/projects/${projectID}`, input)\n            .then(res => {\n                if (file) {\n                    const newForm = new FormData();\n                    newForm.append('image', file);\n                    const config = {\n                        headers: {\n                            'content-type': 'multipart/form-data'\n                        }\n                    };\n                    return axios.post(`/projects/${projectID}/logo`, newForm, config);\n                } else return window.location.replace('/admin/panel')\n            })\n            .then(res => window.location.replace('/admin/panel'))\n            .catch(err => {\n                setError(true);\n                setLoading(false);\n            })\n    }\n\n    function check(e) {\n        setFile(e.target.files[0]);\n        setPreview(URL.createObjectURL(e.target.files[0]));\n    }\n\n    if (firstCheck) {\n        return (\n            <img alt=\"Loading GIF\" src={Loading} id={style.firstCheck} />\n        )\n    }\n\n    return (\n        <div className='displayFlex'>\n            <div id={style.fixedDiv} >\n                <div id={style.logoDivS}>\n                    <Link to={`/project/profile/${projectID}`}><img alt=\"Project logo redirect\" src={input.logo} id={style.invertedLogoSettings} /></Link>\n                </div>\n                <Link id={style.link} to={`/admin/panel`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Back to Admin Panel</span></Link>\n            </div>\n            <div id={style.secondDiv}>\n                <h1 className='font800'>Project Settings</h1>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Project name *</span>\n                    <input value={input.name} maxLength='255' onChange={(e) => handleInputChange(e)} name='name' className={style.input} />\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Logo *</span>\n                    <div id={style.profilePicDiv}>\n                        <div id={style.profilePic}><img alt=\"Project logo\" src={preview} ID={style.logo} /></div>\n                        <label for={style.fileDrop} id={style.logoLabel}>\n                            <FontAwesomeIcon icon={faCloudUploadAlt} /> Upload Logo\n                        </label>\n                        <input onChange={(e) => check(e)} id={style.fileDrop} type='file' />\n                    </div>\n                </div>\n                <div className='displayFlexColumn'>\n                    <span style={{ marginBottom: '25px' }} className='font600'>Main color *</span>\n                    <BlockPicker onChange={(e) => handleInputChange(e)} color={input.mainColor} triangle={'hide'} />\n                </div>\n                <div style={{ marginTop: '25px' }} className='displayFlexColumn'>\n                    <span className='font600'>Website</span>\n                    <input style={{ border: inputErrors.website ? '2px solid red' : '2px solid #e7e7e7' }} value={input.website} maxLength='255' onChange={(e) => handleInputChange(e)} name='website' className={style.input} />\n                    {inputErrors.website && <span className={style.errors}>Please enter a valid URL.</span>}\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Work Zone *</span>\n                    <span className='advert'>Keep in mind that it will be your team's designated workspace. It can be a link to Slack,<br /> Flowdock or WebEx, for example.</span>\n                    <input style={{ border: inputErrors.workZone ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' onChange={(e) => handleInputChange(e)} value={input.workZone} name='workZone' className={style.input} />\n                    {inputErrors.workZone && <span className={style.errors}>Please enter a valid URL.</span>}\n                </div>\n                <div id={style.socialDiv}>\n                    <div className='displayFlexColumn' id='alignItemsFS'>\n                        <span className='font800'><FontAwesomeIcon icon={faProductHunt} style={{ color: '#DA552F' }} /> Product Hunt</span>\n                        <input style={{ border: inputErrors.productHunt ? '2px solid red' : '2px solid #e7e7e7' }} value={input.productHunt} maxLength='255' name='productHunt' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\n                        {inputErrors.productHunt && <span className={style.errors}>Please enter a valid URL.</span>}\n                    </div>\n                    <div className='displayFlexColumn' id='alignItemsFS'>\n                        <span className='font800'><FontAwesomeIcon style={{ color: ' #00acee' }} icon={faTwitterSquare} /> Twitter</span>\n                        <input style={{ border: inputErrors.twitter ? '2px solid red' : '2px solid #e7e7e7' }} value={input.twitter} maxLength='255' name='twitter' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\n                        {inputErrors.twitter && <span className={style.errors}>Please enter a valid URL.</span>}\n                    </div>\n                    <div className='displayFlexColumn' id='alignItemsFS'>\n                        <span className='font800'><FontAwesomeIcon style={{ color: '#0e76a8' }} icon={faLinkedin} /> LinkedIn</span>\n                        <input style={{ border: inputErrors.linkedIn ? '2px solid red' : '2px solid #e7e7e7' }} value={input.linkedIn} maxLength='255' name='linkedIn' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\n                        {inputErrors.linkedIn && <span className={style.errors}>Please enter a valid URL.</span>}\n                    </div>\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>One-line description *</span>\n                    <span className='advert'>Describe your project in just a few words.</span>\n                    <input value={input.oneLineDescription} maxLength=\"100\" onChange={(e) => handleInputChange(e)} name='oneLineDescription' className={style.input} />\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Describe your project *</span>\n                    <textarea value={input.description} onChange={(e) => handleInputChange(e)} name='description' maxLength=\"2000\" className={style.textarea} />\n                </div>\n                <div>\n                    {input.users && input.users.map(user => !user.userXprojects.isFounder ? <UserCard key={user.id} user={user} projectID={input.id} /> : null)}\n                </div>\n                {error && <Alert id={style.alert} color=\"danger\">Please complete all the necessary fields.</Alert>}\n                {loading && !error ? <img alt=\"Loading GIF\" id={style.loading} src={Loading} /> :\n                    <div id={style.btnDiv}>\n                        <button disabled={btnDisabled} onClick={handleSubmit} id={style.uploadBtn}>Update your project</button>\n                        <Confirmation project={input} />\n                    </div>}\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userInfo\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setUserInfo: username => dispatch(setUserInfo(username))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectSettings);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobListings.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/StartupAdminPanel/StartupAdminPanel.jsx",["222"],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/UserProfile/UserProfile.jsx",["223"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport style from './UserProfile.module.css';\nimport { Link } from 'react-router-dom';\nimport jwt from 'jsonwebtoken';\nimport HirePopUp from '../../Components/HirePopUp/HirePopUp';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ProjectCard from '../../Components/ProfileProjectCard/ProfileProjectCard';\nimport Loading from '../../Media/Loading.gif';\nimport EmptyUser from '../../Media/EmptyUserProfile.svg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faGithubSquare, faLinkedin, faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\n\nfunction UserProfile({ username, pathname }) {\n\n    const [user, setUser] = useState({});\n    const [isUser, setIsUser] = useState(false)\n    const [color, setColor] = useState(null);\n    const [hasWorked, setHasWorked] = useState(false);\n    const [hasCreated, setHasCreated] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [noUser, setNoUser] = useState(false);\n\n    useEffect(() => {\n        const usuario = jwt.decode(JSON.parse(localStorage.getItem('user')));\n        if (!usuario) setNoUser(true);\n        axios.get(`/users/${username}`)\n            .then(res => {\n                if (res.data === null) window.location.replace('/error');\n                setUser(res.data);\n                setColor(res.data.color);\n                var userProjects = {};\n                if (res.data.projects.find(project => project.userXprojects.isFounder === true)) userProjects.own = true;\n                if (res.data.projects.find(project => project.userXprojects.isFounder === false)) userProjects.joined = true;\n                setHasCreated(userProjects);\n                if (usuario && usuario.username === res.data.username) setIsUser(true);\n                if (pathname.search === \"?verify\" && usuario && usuario.username !== res.data.username) setHasWorked(true);\n                setLoading(false);\n            })\n            .catch(err => console.log(err))\n    }, [])\n\n    function validateSkill(skill) {\n        if (hasWorked) {\n            axios.post(`/skills/${username}/validate`, { skill: skill.label })\n                .then(res => window.location.reload())\n                .catch(err => console.log(err))\n        }\n    }\n\n    const BlueOnGreenTooltip = withStyles({\n        tooltip: {\n            color: \"white\",\n            backgroundColor: \"#181a19\",\n            fontFamily: 'Nunito',\n            fontSize: '12px'\n        }\n    })(Tooltip);\n\n    return (\n        <div>\n            {loading ?\n                <img alt=\"Suggestions GIF\" id={style.loading} src={Loading} /> :\n                <div>\n                    <div id={style.cover} style={{ backgroundColor: color }}></div>\n                    <div className='displayFlexColumn' id='alignItemsCenter'>\n                        <div id={style.socialMediaDiv} style={{ color: color }}>\n                            {isUser ? <Link className='link' to='/edit/user/me'><button style={{ background: color, color: user.brightness === 'bright' ? '#fff' : '#000' }} id={style.btn}>UPDATE PROFILE</button></Link> : noUser ? null : <HirePopUp applicantsNotifications={user.notifications} applicantUsername={user.username} color={color} />}\n                            {user.gitHub && <a target='_blank' rel=\"noreferrer\" href={user.gitHub} style={{ textDecoration: 'none', color: color }}><FontAwesomeIcon icon={faGithubSquare} /></a>}\n                            {user.linkedIn && <a target='_blank' rel=\"noreferrer\" href={user.linkedIn} style={{ textDecoration: 'none', color: color }}><FontAwesomeIcon icon={faLinkedin} /></a>}\n                            {user.twitter && <a target='_blank' rel=\"noreferrer\" href={user.twitter} style={{ textDecoration: 'none', color: color }}><FontAwesomeIcon icon={faTwitterSquare} /></a>}\n                        </div>\n                        <div style={{ border: `10px solid ${color}`, alignSelf: 'center', backgroundImage: `url(${user.profilePic})` }} id={style.profilePic}></div>\n                        <h3 className='font800'><span style={{ color: color }}>@ </span>{user.username}</h3>\n                        <span id={style.description}>{user.description}</span>\n                        <div id={style.datadiv}>\n                            {user.region && user.country ?\n                                <span>{user.region && user.country && `📍 ${user.region}, ${user.country}`}</span> :\n                                null\n                            }\n                            <div id={style.skillDiv}>\n                                {user.skills && user.skills.map(skill =>\n                                    hasWorked ?\n                                        <BlueOnGreenTooltip key={skill.user_skills.id} title={skill.user_skills.isValidated ? 'Already validated!' : `Validate @${username}'s skill!`}>\n                                            <div style={{ background: skill.strongColor, color: skill.softColor }} id={style.skillBtn} onClick={() => validateSkill(skill)}>\n                                                <span>{hasWorked && !skill.user_skills.isValidated && <FontAwesomeIcon icon={faPlusCircle} />} {skill.user_skills.isValidated ? <FontAwesomeIcon icon={faCheckCircle} /> : null} {skill.label}</span>\n                                            </div>\n                                        </BlueOnGreenTooltip> :\n                                        <div style={{ background: skill.strongColor, color: skill.softColor }} id={style.skillBtn} onClick={() => validateSkill(skill)}>\n                                            <span>{hasWorked && !skill.user_skills.isValidated && <FontAwesomeIcon icon={faPlusCircle} />} {skill.user_skills.isValidated ? <FontAwesomeIcon icon={faCheckCircle} /> : null} {skill.label}</span>\n                                        </div>\n                                )}\n                            </div>\n                        </div>\n                        {hasCreated.own && <div className={style.projectDiv}>\n                            <h3 id={style.smallerTitles} className='font800'>🧑‍💻 Projects created</h3>\n                            <div id={style.mainProjectDiv}>\n                                {user.projects && user.projects.map(project => project.userXprojects.isFounder ? <ProjectCard key={project.id} isFounder={true} project={project} /> : null)}\n                            </div>\n                        </div>}\n                        {hasCreated.joined && <div className={style.projectDiv}>\n                            <h3 id={style.smallerTitles} className='font800'>🤝 Project joined</h3>\n                            <div id={style.mainProjectDiv}>\n                                {user.projects && user.projects.map(project => !project.userXprojects.isFounder ? <ProjectCard key={project.id} project={project} /> : null)}\n                            </div>\n                        </div>}\n                        {user.projects.length === 0 &&\n                            <div id={style.emptyDiv}>\n                                <img id={style.empty} alt=\"No project to display\" src={EmptyUser} />\n                                <h1 id={style.emptyTitle} className='font200'>{isUser ? \"You haven't joined or created any project.\" : \"This developer hasn't joined or created any project.\"}</h1>\n                            </div>}\n                    </div>\n                </div>}\n        </div>\n    )\n}\n\nexport default UserProfile;","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/WorkersList/WorkersList.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/AddJob/AddJob.jsx",["224","225"],"import React, { useState, useLayoutEffect } from 'react';\nimport style from './AddJob.module.css';\nimport axios from 'axios';\nimport { Hint } from 'react-autocomplete-hint';\nimport { connect } from 'react-redux';\nimport { Editor } from '@tinymce/tinymce-react';\nimport Loading from '../../Media/Loading.gif';\nimport jwt from 'jsonwebtoken';\nimport { setUserInfo } from '../../Actions/index';\nimport { Link } from 'react-router-dom';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDoorOpen } from '@fortawesome/free-solid-svg-icons';\n\nfunction AddJob({ projectID, skills, setUserInfo }) {\n\n    const [project, setProject] = useState({});\n    const [selectedSkills, setSelectedSkills] = useState([]);\n    const [input, setInput] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    async function asyncUseEffect(username, userId) {\n        await (setUserInfo(username));\n        try {\n            const projectData = await axios.get(`/projects/${projectID}`);\n            const userFound = await projectData.data.users.find(member => member.id === userId);\n            if (!userFound || userFound.userXprojects.isFounder === false || projectData.data.isDeleted) window.location.replace('/error');\n            setProject(projectData.data);\n            setTimeout(() => {\n                setLoading(false);\n            }, 1000)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    useLayoutEffect(() => {\n        const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\n        if (user) {\n            asyncUseEffect(user.username, user.id);\n        } else window.location.replace('/error');\n    }, [])\n\n    function removeSkill(e) {\n        setSelectedSkills(selectedSkills.filter(skill => skill.label !== e.target.name))\n    }\n\n    function addSkill(e) {\n        if (e.keyCode === 13) {\n            var found = skills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n            var found2 = selectedSkills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n            if (found && !found2) {\n                setSelectedSkills(selectedSkills.concat(found));\n                e.target.value = '';\n            }\n        }\n    }\n\n    function handleInputChange(e) {\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function handleDescriptionChange(e) {\n        setInput({\n            ...input,\n            description: e.target.getContent()\n        })\n    }\n\n    function handleSubmit() {\n        setLoading(true);\n        const justIDs = selectedSkills.map(skill => skill.id);\n\n        if (!input.title || !input.description) return setError('Please complete all the necessary fields.')\n\n        axios.post(`/jobs/${project.id}`, { jobInfo: input, skills: justIDs })\n            .then(res => window.location.replace(`/project/jobPanel/${project.id}`))\n            .catch(err => {\n                setError('Something failed—we are sorry!');\n                setLoading (false);\n            })\n    }\n\n    return (\n        <div>\n            <div id={style.fixedDiv}>\n                <div id={style.logoDiv}>\n                    <Link to={`/project/profile/${projectID}`}><img alt=\"Project logo\" src={project.logo} id={style.logo} /></Link>\n                </div>\n                <Link id={style.link} to={`/project/jobPanel/${projectID}`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Go back</span></Link>\n            </div>\n            <div id={style.secondDiv}>\n                {!loading ?\n                    <div id={style.innerDiv}>\n                        <h1 id={style.mainSpan} className='font800'>Post a job</h1>\n                        <div className='displayFlexColumn'>\n                            <span className='font600'>Title *</span>\n                            <input maxLength='255' name='title' onChange={(e) => handleInputChange(e)} className={style.input} />\n                        </div>\n                        <div className='displayFlexColumn'>\n                            <span className={style.title}>Description *</span>\n                            {window.innerWidth > 385 && <Editor\n                                onChange={(e) => handleDescriptionChange(e)}\n                                apiKey='5ltasngibqdlae7csndk86vmlye4eqd8jhk6fsiza0lpz5db'\n                                init={{\n                                    selector: 'textarea',\n                                    content_style:\n                                        \"@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800;900&display=swap'); body { font-family: 'Nunito';}\",\n                                    branding: false,\n                                    height: 300,\n                                    width: 723,\n                                    menubar: false,\n                                    plugins: [\n                                        'advlist autolink lists link image',\n                                        'charmap print preview anchor help',\n                                        'searchreplace visualblocks code',\n                                        'insertdatetime media table paste wordcount',\n                                    ],\n                                    toolbar:\n                                        'undo redo | formatselect | bold italic | \\\n                            alignleft aligncenter alignright | \\\n                            bullist numlist outdent indent'\n                                }}\n                            />}\n                            <textarea id={style.textarea} placeholder='Describe your project'></textarea>\n                        </div>\n                        <div id={style.skillDiv}>\n                            <span className='font600'>Skills</span>\n                            <div id={style.selectedSkills}>\n                                {selectedSkills.map(skill =>\n                                    <div key={skill.id}>\n                                        <button style={{ background: skill.strongColor, color: skill.softColor }} name={skill.label} onClick={(e) => removeSkill(e)} id={style.skillBtn}>{skill.label}</button>\n                                    </div>\n                                )}\n                            </div>\n                            <Hint options={skills}>\n                                <input onKeyDown={(e) => addSkill(e)} className={style.inputSkill} placeholder='Press enter to add a skill' />\n                            </Hint>\n                            <span className='advert'>If you don't find your skill, please contact us.</span>\n                        </div>\n                        <div>\n                            <button onClick={handleSubmit} id={style.uploadBtn}>Post job</button>\n                            {error &&\n                                <Alert id={style.alert} color=\"danger\">\n                                    {error}\n                                </Alert>\n                            }\n                        </div>\n                    </div> :\n                    <img alt=\"Loading GIF\" className={style.loading} src={Loading} />}\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        skills: state.allSkills,\n        user: state.userInfo\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setUserInfo: username => dispatch(setUserInfo(username))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddJob);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobInfo/JobInfo.jsx",["226"],"import React, { useState, useLayoutEffect } from 'react';\nimport style from './JobInfo.module.css';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Loading from '../../Media/Loading.gif';\nimport Register from '../../Components/PopUps/RegisterPopUp';\nimport jwt from 'jsonwebtoken';\nimport { setUserInfo } from '../../Actions/index'; \nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction JobInfo({ jobID, user, setUserInfo }) {\n    const [job, setJob] = useState({});\n    const [applied, setApplied] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [isMember, setIsMember] = useState(false);\n    const [notUser, setNotUser] = useState(false);\n\n    async function asyncUseEffect(username) {\n        await (setUserInfo(username));\n    }\n\n    useLayoutEffect(() => {\n        if (!user.username) {\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\n            if (user) {\n                asyncUseEffect(user.username);\n            } else setNotUser (true)\n        }\n        axios.get(`/jobs/${jobID}/jobInfo`)\n            .then(jobInfo => {\n                setJob(jobInfo.data);\n                const found = jobInfo.data.Applicants.find(applicant => applicant.id === user.id);\n                const findMember = jobInfo.data.project.users.find(member => member.id === user.id && member.userXprojects.endDate === null);\n                if (findMember) {\n                    setIsMember(true);\n                } else if (found && found.username) setApplied(true)\n                setLoading(false);\n            })\n            .catch(err => console.log(err))\n    }, [user])\n\n    function applyToJob() {\n        axios.post(`/jobs/${jobID}/applicants`, { username: user.username })\n            .then(res => setApplied(true))\n            .catch(err => console.log(err))\n    }\n\n    return (\n        <div>\n            {!loading ?\n                <div>\n                    {job.project &&\n                        <div style={{ background: job.project && job.project.mainColor, color: job.project.brightness === 'bright' ? '#fff' : '#000' }} id={style.mainDiv}>\n                            <Link style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000' }} to='/jobs'><span id={style.goBack}><FontAwesomeIcon style={{ marginRight: '10px' }} icon={faArrowLeft} />More jobs</span></Link>\n                            <Link className='links' to={`/project/profile/${job.project.id}`}>\n                                <div className='displayFlex' id='alignItemsCenter'>\n                                    <div id={style.projectLogoDiv}>\n                                        <img alt=\"Project logo\" src={job.project.logo} id={style.logo} />\n                                    </div>\n                                    <h5 style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000' }} className='font800'>{job.project.name}</h5>\n                                </div>\n                            </Link>\n                            <h1 id={style.jobTitle}>{job.title}</h1>\n                            <div id={style.btnDiv}>\n                                {notUser ? <Register isJobProfile={true} /> :\n                                    isMember ? <span style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', background: job.project.brightness === 'bright' ? '#000' : '#fff' }} id={style.applied}><FontAwesomeIcon id={style.appliedIcon} icon={faCheckCircle} /> You are already part of {job.project.name}.</span> :\n                                        applied ?\n                                            <span style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', background: job.project.brightness === 'bright' ? '#000' : '#fff' }} id={style.applied}><FontAwesomeIcon id={style.appliedIcon} icon={faCheckCircle} /> You have applied to this job</span> :\n                                            <button onClick={applyToJob} style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', border: job.project.brightness === 'bright' ? '4px solid #fff' : '4px solid #000' }} id={style.applyBtn}>Apply to this job</button>\n                                }\n                                {job.Applicants.length >= 15 && !applied && <span className='font200'>🔥 This job has received many applications</span>}\n                            </div>\n                        </div>}\n                    <div>\n                        <div dangerouslySetInnerHTML={{ __html: job.description }} id={style.jobDescrip}></div>\n                    </div>\n                </div> :\n                <img alt=\"Loading GIF\" id={style.loading} src={Loading} />\n            }\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userInfo\n    }\n}\n\nfunction mapDispatchToProps (dispatch) {\n    return {\n        setUserInfo: username => dispatch(setUserInfo(username))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobInfo);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/NotFound/NotFound.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/Suggestions/Suggestions.jsx",["227"],"import React, { useState, useLayoutEffect } from 'react';\nimport style from '../WorkersList/WorkersList.module.css';\nimport { connect } from 'react-redux';\nimport Loading from '../../Media/Loading.gif';\nimport UserCardSearch from '../../Components/UserCard/UserCardSearch';\nimport ProjectCard from '../../Components/UserCard/ProjectCard';\nimport { findSuggestions } from '../../utils';\nimport Empty from '../../Media/NotFoundSearch.svg';\nimport Cover from '../../Media/searchCover.jpg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nfunction Suggestions({ pathname, users, projects }) {\n\n    const [loading, setLoading] = useState(true);\n    const [suggestions, setSuggestions] = useState({});\n\n    useLayoutEffect(() => {\n        const allProjectsAndUsers = projects.concat(users);\n        setSuggestions(findSuggestions(allProjectsAndUsers, pathname.search));\n        setTimeout(() => {\n            setLoading (false);\n        }, 2000)\n    }, [users])\n\n\n    function search(e) {\n        setLoading(true);\n        if (e.keyCode === 13) {\n            const allProjectsAndUsers = projects.concat(users);\n            setSuggestions(findSuggestions(allProjectsAndUsers, `?${e.target.value}`));\n        }\n        setLoading(false);\n    }\n\n    return (\n        <div>\n            <div id={style.mainImage} style={{ backgroundImage: `url(${Cover})`}}>\n                <div id={style.searchDiv}>\n                    <FontAwesomeIcon icon={faSearch} />\n                    <input onKeyDown={(e) => search(e)} placeholder='Search for projects or users' id={style.searchInput} />\n                </div>\n            </div>\n            {loading ? <img alt=\"Loading GIF\" id={style.suggestionsLoading} src={Loading} /> :\n                <div>\n                    {suggestions.projects.length > 0 && <div className='displayFlexColumn' id='alignItemsCenter'>\n                        <div className='displayFlex' id='alignItemsCenter'>\n                            <h1 className='font800'>Projects ({suggestions.projects.length})</h1>\n                        </div>\n                        <div id={style.userCards}>\n                            {suggestions.projects.map(project => <ProjectCard key={project.id} project={project} />)}\n                        </div>\n                    </div>}\n                    {suggestions.users.length > 0 && <div className='displayFlexColumn' id='alignItemsCenter'>\n                        <div className='displayFlex' id='alignItemsCenter'>\n                            <h1 className='font800'>Developers ({suggestions.users.length})</h1>\n                        </div>\n                        <div id={style.userCards}>\n                            {suggestions.users.map(user => <UserCardSearch key={user.id} user={user} />)}\n                        </div>\n                    </div>}\n                    {suggestions.projects.length === 0 && suggestions.users.length === 0 &&\n                        <div className='justifyCenter' id='alignItemsCenter'>\n                            <img alt=\"No suggestions found\" src={Empty} id={style.empty} />\n                            <div>\n                                <h1 style={{ marginBottom: '25px' }} className='font800'>Oops... nothing was found.</h1>\n                            </div>\n                        </div>}\n                </div>}\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.users,\n        projects: state.projects\n    }\n}\n\nexport default connect(mapStateToProps, null)(Suggestions);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/PostStartup/PostStartup.jsx",["228","229","230"],"import React, { useState, useLayoutEffect } from 'react';\nimport Logo from '../../Media/invertedlogo.png';\nimport style from './PostStartup.module.css';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { BlockPicker } from 'react-color';\nimport { getBrightness } from '../../utils';\nimport Loading from '../../Media/Loading.gif';\nimport { setUserInfo } from '../../Actions/index';\nimport jwt from 'jsonwebtoken';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt, faDoorOpen } from '@fortawesome/free-solid-svg-icons';\nimport { faProductHunt, faTwitterSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\n\nfunction PostStartup({ user, limitOfPosts, setUserInfo }) {\n    const [input, setInput] = useState({ mainColor: '#000' });\n    const [preview, setPreview] = useState('https://i.ibb.co/m82SNJT/profile-pic-startup-sin-marco.png');\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [firstCheck, setFirstCheck] = useState(true);\n    const [inputErrors, setInputErrors] = useState({});\n    const [btnDisabled, setDisabled] = useState(false);\n\n    async function asyncUseEffect(username) {\n        await (setUserInfo(username));\n    }\n\n    useLayoutEffect(() => {\n        if (!user.username) {\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\n            if (user) {\n                asyncUseEffect(user.username);\n            } else window.location.replace('/error');\n        }\n        if (limitOfPosts) window.location.replace('/error');\n        setTimeout(() => {\n            setFirstCheck(false);\n        }, 2000)\n    }, [limitOfPosts])\n\n    function handleInputChange(e) {\n        var copyOfErrors = inputErrors;\n        var noErrors = true;\n\n        if (e.hex) return setInput({ ...input, mainColor: e.hex });\n\n        if (e.target.name === 'website' || e.target.name === 'workZone' || e.target.name === 'productHunt' || e.target.name === 'twitter' || e.target.name === 'linkedIn') {\n            if (!/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(e.target.value)) copyOfErrors = { ...copyOfErrors, [e.target.name]: true };\n            else copyOfErrors = { ...copyOfErrors, [e.target.name]: false }\n        }\n\n        for (const key in copyOfErrors) if (copyOfErrors[key]) noErrors = false;\n\n        if (noErrors) setDisabled(false);\n        else setDisabled(true);\n\n        setInputErrors(copyOfErrors);\n\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function handleSubmit() {\n        setLoading(true);\n        if (input.name === '') {\n            setError(true);\n            setLoading(false);\n            return;\n        }\n        if (!file) input.logo = 'https://i.ibb.co/m82SNJT/profile-pic-startup-sin-marco.png';\n        input.isPremium = user.isPremium;\n        input.ownerId = user.id;\n        input.brightness = getBrightness(input.mainColor);\n        axios.post(`/projects/${user.username}`, input)\n            .then(res => {\n                if (file) {\n                    const newForm = new FormData();\n                    newForm.append('image', file);\n                    const config = {\n                        headers: {\n                            'content-type': 'multipart/form-data'\n                        }\n                    };\n                    return axios.post(`/projects/${res.data.id}/logo`, newForm, config);\n                } else window.location.replace('/admin/panel')\n            })\n            .then(res => window.location.replace('/admin/panel'))\n            .catch(err => {\n                setError(true);\n                setLoading(false);\n            })\n    }\n\n    function check(e) {\n        setFile(e.target.files[0]);\n        setPreview(URL.createObjectURL(e.target.files[0]));\n    }\n\n    if (firstCheck) {\n        return (\n            <img alt=\"Loading GIF\" id={style.firstCheck} src={Loading} />\n        )\n    }\n\n    return (\n        <div className='displayFlex'>\n            <div id={style.fixedDiv}>\n                <div id={style.logoDiv}>\n                    <Link to={`/user/${user.username}`}><img alt=\"Project logo\" src={Logo} id={style.invertedLogo} /></Link>\n                </div>\n                <Link id={style.link} to={`/admin/panel`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Back to Admin Panel</span></Link>\n            </div>\n            <div id={style.secondDiv}>\n                <h1 className='font800'>Let's start.</h1>\n                <p className='font200'>\n                    Provide the necessary information for developers to fully understand what your project is about. <br />\n                    Remember, the more details you provide, the more users will be interested in what you are doing. <br />\n                    Don't worry, you can always edit this later! <br />\n                </p>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Project name *</span>\n                    <input maxLength='100' onChange={(e) => handleInputChange(e)} name='name' className={style.input} />\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Logo *</span>\n                    <div id={style.profilePicDiv}>\n                        <div id={style.profilePic}><img alt=\"Selected project logo\" src={preview} ID={style.logo} /></div>\n                        <label for={style.fileDrop} id={style.logoLabel}>\n                            <FontAwesomeIcon icon={faCloudUploadAlt} /> Upload Logo\n                        </label>\n                        <input onChange={(e) => check(e)} id={style.fileDrop} type='file' />\n                    </div>\n                </div>\n                <div className='displayFlexColumn'>\n                    <span style={{ marginBottom: '25px' }} className='font600'>Main color *</span>\n                    <BlockPicker onChange={(e) => handleInputChange(e)} color={input.mainColor} triangle={'hide'} />\n                </div>\n                <div style={{ marginTop: '25px' }} className='displayFlexColumn'>\n                    <span className='font600'>Website</span>\n                    <input style={{ border: inputErrors.website ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' onChange={(e) => handleInputChange(e)} name='website' className={style.input} />\n                    {inputErrors.website && <span className={style.errors}>Please enter a valid URL.</span>}\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>Work Zone *</span>\n                    <span className='advert'>Keep in mind that it will be your team's designated workspace. It can be a link to Slack,<br /> Flowdock or WebEx, for example.</span>\n                    <input style={{ border: inputErrors.workZone ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' onChange={(e) => handleInputChange(e)} value={input.workZone} name='workZone' className={style.input} />\n                    {inputErrors.workZone && <span className={style.errors}>Please enter a valid URL.</span>}\n                </div>\n                <div id={style.socialDiv}>\n                    <div className='displayFlexColumn' id='alignItemsFS'>\n                        <span className='font800'><FontAwesomeIcon style={{ color: '#DA552F' }} icon={faProductHunt} /> Product Hunt</span>\n                        <input style={{ border: inputErrors.productHunt ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' name='productHunt' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\n                        {inputErrors.productHunt && <span className={style.errors}>Please enter a valid URL.</span>}\n                    </div>\n                    <div className='displayFlexColumn' id='alignItemsFS'>\n                        <span className='font800'><FontAwesomeIcon style={{ color: ' #00acee' }} icon={faTwitterSquare} /> Twitter</span>\n                        <input style={{ border: inputErrors.twitter ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' name='twitter' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\n                        {inputErrors.twitter && <span className={style.errors}>Please enter a valid URL.</span>}\n                    </div>\n                    <div className='displayFlexColumn' id='alignItemsFS'>\n                        <span className='font800'><FontAwesomeIcon style={{ color: '#0e76a8' }} icon={faLinkedin} /> LinkedIn</span>\n                        <input style={{ border: inputErrors.linkedIn ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' name='linkedIn' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\n                        {inputErrors.linkedIn && <span className={style.errors}>Please enter a valid URL.</span>}\n                    </div>\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600'>One-line description *</span>\n                    <span className='advert'>Describe your project in just a few words.</span>\n                    <input maxLength=\"100\" onChange={(e) => handleInputChange(e)} name='oneLineDescription' className={style.input} />\n                </div>\n                <div className='displayFlexColumn'>\n                    <span className='font600' >Describe your project *</span>\n                    <textarea onChange={(e) => handleInputChange(e)} name='description' maxLength=\"2000\" className={style.textarea} />\n                </div>\n                {error && <Alert id={style.alert} color=\"danger\">Please complete all the necessary fields.</Alert>}\n                {loading && !error ? <img alt=\"Loading GIF\" id={style.loading} src={Loading} /> : <button disabled={btnDisabled} onClick={handleSubmit} id={style.uploadBtn}>Post your project!</button>}\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userInfo,\n        limitOfPosts: state.limitOfPosts\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setUserInfo: username => dispatch(setUserInfo(username))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostStartup);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/ProjectProfile/ProjectProfile.jsx",["231"],"import React, { useEffect, useState } from 'react';\nimport style from './ProjectProfile.module.css';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport JobCard from '../JobListing/JobCardProfile';\nimport Loading from '../../Media/Loading.gif';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faRocket, faGlobe } from '@fortawesome/free-solid-svg-icons';\nimport { faProductHunt, faTwitterSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\n\nfunction ProjectProfile({ projectID }) {\n\n    const [project, setProject] = useState({});\n    const [hasUpvoted, setHasUpvoted] = useState(false);\n    const [loading, setLoading] = useState(true);\n\n    const BlueOnGreenTooltip = withStyles({\n        tooltip: {\n            color: \"white\",\n            backgroundColor: \"#181a19\",\n            fontFamily: 'Nunito',\n            fontSize: '12px'\n        },\n        arrow: {\n            color: \"#181a19\"\n        }\n    })(Tooltip);\n\n    useEffect(() => {\n        axios.get(`/projects/${projectID}`)\n            .then(project => {\n                setProject(project.data);\n                setLoading(false);\n            })\n            .catch(err => console.log(err))\n    }, [])\n\n    function modifyUpvotes() {\n        const updatedUpvotes = { upvotes: project.upvotes + 1 };\n        axios.patch(`/projects/${project.id}`, updatedUpvotes)\n            .then(res => {\n                setProject({ ...project, upvotes: project.upvotes + 1 });\n                setHasUpvoted(true);\n            })\n            .catch(err => console.log(err))\n    }\n\n    if (loading) {\n        return (\n            <img alt=\"Loading GIF\" id={style.loading} src={Loading} />\n        )\n    }\n\n    return (\n        <div className='displayFlexColumn'>\n            <div style={{ background: project.mainColor }} id={style.cover}></div>\n            <div id={style.presentDiv}>\n                <div id={style.socialMediaDiv}>\n                    {hasUpvoted || project.isDeleted ? <button style={{ display: project.isDeleted ? 'none' : 'inline', background: project.mainColor, color: project.brightness === 'bright' ? '#fff' : '#000' }} id={style.upvoteBtn}><FontAwesomeIcon icon={faCheckCircle} /></button> : <button onClick={modifyUpvotes} style={{ background: project.mainColor, color: project.brightness === 'bright' ? '#fff' : '#000' }} id={style.upvoteBtn}><FontAwesomeIcon icon={faRocket} /> Upvote | {project.upvotes}</button>}\n                    {project.productHunt && <a href={project.productHunt} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faProductHunt} /></a>}\n                    {project.twitter && <a href={project.twitter} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faTwitterSquare} /></a>}\n                    {project.linkedIn && <a href={project.linkedIn} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faLinkedin} /></a>}\n                    {project.website && <a href={project.website} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faGlobe} /></a>}\n                </div>\n                <div id={style.projectLogo}><img alt=\"Project logo\" src={project.logo} id={style.logo} /></div>\n                <h1 id={style.projectName}>{project.name} {project.isDeleted && <BlueOnGreenTooltip title='This project has been closed by its founders.' arrow><span id={style.closedSpan}>CLOSED</span></BlueOnGreenTooltip>}</h1>\n                <span id={style.oneLineDescription}>{project.oneLineDescription}</span>\n            </div>\n            <div id={style.aboutDiv} style={{ background: project.mainColor }}>\n                <h1 className='font600'>About</h1>\n                <p className='font200' style={{ color: project.brightness === 'bright' ? '#fff' : '#000', fontSize: '17px' }}>{project.description}</p>\n            </div>\n            <div className='displayFlexColumn' id='alignItemsCenter'>\n                <h2 className='font800'>Members</h2>\n                <div id={style.mainUserDiv}>\n                    {project.users && project.users.map(user =>\n                        user.userXprojects.endDate === null ?\n                            <div key={user.id} style={{ background: user.color, color: user.brightness === 'bright' ? '#fff' : '#000' }} id={style.userDiv}>\n                                <img alt=\"Profile\" src={user.profilePic} id={style.profilePic} />\n                                <div className='displayFlexColumn' id='alignItemsCenter'>\n                                    <h5 className='font800'>@ {user.username}</h5>\n                                    <span id={style.lowEnphasis}>{user.userXprojects.role}</span>\n                                </div>\n                                <Link to={`/user/${user.username}`}>\n                                    <button style={{ color: user.brightness === 'bright' ? '#fff' : '#000', border: user.brightness === 'bright' ? '2px solid #fff' : '2px solid #000' }} id={style.contactBtn}>Contact</button>\n                                </Link>\n                            </div> :\n                            null\n                    )}\n                </div>\n            </div>\n            {project.jobOpportunities && project.jobOpportunities.length > 0 &&\n                <div id={style.mainJobDiv}>\n                    <h2 className='font800'>Join {project.name}</h2>\n                    {project.jobOpportunities.map(job => <JobCard key={job.id} project={project} job={job} />)}\n                </div>}\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userInfo\n    }\n}\n\nexport default connect(mapStateToProps, null)(ProjectProfile);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/StartupAdminPanel/JobPanel/JobPanel.jsx",["232"],"import React, { useLayoutEffect, useState } from 'react';\nimport style from './JobPanel.module.css';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport JobCard from '../../JobListing/JobCardProfile';\nimport Empty from '../../../Media/emptyJob.svg';\nimport Loading from '../../../Media/Loading.gif';\nimport jwt from 'jsonwebtoken';\nimport { setUserInfo } from '../../../Actions/index';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDoorOpen } from '@fortawesome/free-solid-svg-icons';\n\nfunction JobPanel({ projectID, setUserInfo, user }) {\n    const [project, setProject] = useState({});\n    const [loading, setLoading] = useState (true);\n\n    async function asyncUseEffect(username, userId) {\n        await (setUserInfo(username));\n        try {\n            const projectData = await axios.get(`/projects/${projectID}`);\n            const userFound = await projectData.data.users.find(member => member.id === userId);\n            if (!userFound || userFound.userXprojects.isFounder === false || projectData.data.isDeleted) window.location.replace('/error');\n            setProject(projectData.data);\n            setTimeout(() => {\n                setLoading(false);\n            }, 1000)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    useLayoutEffect(() => {\n        const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\n        if (user) {\n            asyncUseEffect(user.username, user.id);\n        } else window.location.replace ('/error');\n    }, [])\n\n    if (loading) {\n        return (\n            <img alt=\"Loading GIF\" src={Loading} id={style.loading} />\n        )\n    }\n\n    return (\n        <div className='displayFlex'>\n            <div id={style.fixedDiv}>\n                <div id={style.logoDiv}>\n                    <Link to={`/project/profile/${projectID}`}><img alt=\"Project logo\" src={project.logo} id={style.invertedLogo} /></Link>\n                </div>\n                <Link id={style.link} to={`/admin/panel`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Back to Admin Panel</span></Link>\n            </div>\n            {project.jobOpportunities && project.jobOpportunities.length > 0 ?\n                <div id={style.secondDiv}>\n                    <h1 className='font800'>Job Panel</h1>\n                    <div id={style.jobDiv}>\n                        {project.jobOpportunities && project.jobOpportunities.map(job => <JobCard key={job.id} isJobPanel={true} project={project} job={job} />)}\n                    </div>\n                    <Link className='links' to={`/project/addJob/${projectID}`}><span id={style.addBtn}>Post a job</span></Link>\n                </div> :\n                <div id={style.emptyDiv}>\n                    <img alt=\"No jobs posted\" src={Empty} id={style.empty} />\n                    <div id={style.innerEmptyDiv}>\n                        <h1 style={{ marginBottom: '25px' }} className='font800'>No jobs posted.</h1>\n                        <Link className='links' to={`/project/addJob/${projectID}`}><span id={style.addBtn2}>Post a job</span></Link>\n                    </div>\n                </div>}\n        </div>\n    )\n}\n\nfunction mapStateToProps (state) {\n    return {\n        user: state.userInfo\n    }\n} \n\nfunction mapDispatchToProps (dispatch) {\n    return {\n        setUserInfo: username => dispatch(setUserInfo(username))\n    }\n}\n\nexport default connect (mapStateToProps, mapDispatchToProps)(JobPanel);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/EditUser/EditUser.jsx",["233","234","235","236","237"],"import React, { useLayoutEffect, useState } from 'react';\nimport style from './EditUser.module.css';\nimport { connect } from 'react-redux';\nimport Verified from '../../Media/Verification.png';\nimport GoPremium from '../../Components/GoPremiumPopUp/GoPremium';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { Hint } from 'react-autocomplete-hint';\nimport Loading from '../../Media/Loading.gif';\nimport { BlockPicker } from 'react-color';\nimport axios from 'axios';\nimport { getBrightness } from '../../utils';\nimport jwt from 'jsonwebtoken';\nimport { setUserInfo } from '../../Actions/index';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPortrait, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faGithubSquare, faLinkedin, faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\n\nfunction EditUser({ user, skills, setUserInfo }) {\n\n    const [input, setInput] = useState({\n        email: user.email,\n        color: user.color,\n        gitHub: user.gitHub,\n        linkedIn: user.linkedIn,\n        twitter: user.twitter,\n        description: user.description,\n        country: user.country,\n        region: user.region\n    });\n    const [preview, setPreview] = useState(user.profilePic);\n    const [selectedSkills, setSelectedSkills] = useState();\n    const [errors, setErrors] = useState({});\n    const [file, setFile] = useState(null);\n    const [btnDisabled, setDisabled] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    async function asyncUseEffect(username) {\n        await (setUserInfo(username));\n    }\n\n    useLayoutEffect(() => {\n        if (!user.username) {\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\n            if (user) {\n                asyncUseEffect(user.username);\n            } else window.location.replace('/error');\n        }\n        setPreview(user.profilePic);\n        setInput({\n            email: user.email,\n            color: user.color,\n            gitHub: user.gitHub,\n            linkedIn: user.linkedIn,\n            twitter: user.twitter,\n            description: user.description,\n            country: user.country,\n            region: user.region\n        })\n        setSelectedSkills(user.skills);\n        setLoading(false)\n    }, [user])\n\n    function check(e) {\n        setFile(e.target.files[0]);\n        setPreview(URL.createObjectURL(e.target.files[0]));\n    }\n\n    function addSkill(e) {\n        if (e.keyCode === 13) {\n            var found = skills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n            var found2 = selectedSkills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\n            if (found && !found2) {\n                setSelectedSkills(selectedSkills.concat(found));\n                e.target.value = '';\n            }\n        }\n    }\n\n    function removeSkill(e) {\n        setSelectedSkills(selectedSkills.filter(skill => skill.label !== e.target.name))\n    }\n\n    function handleInputChange(e) {\n        var copyOfErrors = errors;\n        var noErrors = true;\n        if (e.hex) return setInput({ ...input, color: e.hex });\n        if (e.target.name === 'email') {\n            if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g.test(e.target.value)) copyOfErrors = { ...copyOfErrors, email: true };\n            else copyOfErrors = { ...copyOfErrors, email: false };\n        }\n        if (e.target.name === 'gitHub' || e.target.name === 'linkedIn' || e.target.name === 'twitter') {\n            if (!/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(e.target.value)) copyOfErrors = { ...copyOfErrors, [e.target.name]: true };\n            else copyOfErrors = { ...errors, [e.target.name]: false };\n        }\n\n        for (const key in copyOfErrors) if (copyOfErrors[key]) noErrors = false;\n\n        if (noErrors) setDisabled(false);\n        else setDisabled(true);\n\n        setErrors(copyOfErrors);\n\n        setInput({ ...input, [e.target.name]: e.target.value })\n    }\n\n    function handleSubmit() {\n        setLoading(true);\n        input.brightness = getBrightness(input.color);\n        const filteredSkills = selectedSkills.map(skill => skill.id);\n        input.skills = filteredSkills;\n        axios.put(`/users/${user.id}`, input)\n            .then(res => {\n                if (file) {\n                    const newForm = new FormData();\n                    newForm.append('image', file);\n                    const config = {\n                        headers: {\n                            'content-type': 'multipart/form-data'\n                        }\n                    };\n                    return axios.post(`/users/${user.id}/profilePic`, newForm, config);\n                } else {\n                    window.location.replace(`/user/${user.username}`)\n                }\n            })\n            .then(res => window.location.replace(`/user/${user.username}`))\n            .catch(err => {\n                setError(true);\n                setLoading(false);\n            })\n    }\n\n    return (\n        <div className='displayFlexColumn' id='alignItemsCenter'>\n            <div style={{ background: user.color }} id={style.mainImage}>\n                <h1 style={{ color: user.brightness === 'bright' ? '#fff' : '#000' }} className='font800'>Edit your profile</h1>\n                <svg id={style.cover} style={{ position: 'absolute', top: 160 }} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n                    <path fill=\"#f9f9f9\" fill-opacity=\"1\" d=\"M0,192L60,192C120,192,240,192,360,202.7C480,213,600,235,720,224C840,213,960,171,1080,160C1200,149,1320,171,1380,181.3L1440,192L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z\"></path>\n                </svg>\n            </div>\n            <div id={style.container}>\n                {!loading && <div id={style.form}>\n                    <div className='displayFlex' id='alignItemsCenter'>\n                        <h2 className='font800'>@{user.username}</h2>\n                        {user.isPremium && <img alt=\"Verification badge\" id={style.verification} src={Verified} />}\n                    </div>\n                    <div style={{ display: user.isPremium ? 'none' : 'flex' }} id={style.GPdiv}>\n                        <span className='font800'>Verify your FindDevs account and access all the benefits!</span>\n                        <GoPremium />\n                    </div>\n                    <div className='displayFlexColumn' id='alignItemsCenter'>\n                        <div id={style.firstDiv} className='displayFlex'>\n                            <div id={style.imageDiv}>\n                                <div style={{ backgroundImage: `url(${preview})` }} id={style.profilePic}></div>\n                                <label for={style.fileDrop} id={style.logoLabel}><FontAwesomeIcon icon={faPortrait} /> Upload Image</label>\n                                <input onChange={(e) => check(e)} id={style.fileDrop} type='file' />\n                                <BlockPicker onChange={(e) => handleInputChange(e)} color={input.color} />\n                            </div>\n                            <div id={style.innerFirstDiv}>\n                                <div className={style.inputDiv}>\n                                    <span className='font800'>Your email</span>\n                                    <span id={style.lowEnphasis}>Keep in mind that it will be the one through which startups will contact you.</span>\n                                    <input name='email' style={{ border: errors.email ? '2px solid red' : '2px solid #e7e7e7' }} value={input.email} onChange={(e) => handleInputChange(e)} className={style.biggerInput}></input>\n                                    {errors.email && <span className={style.errors}>Please enter a valid email.</span>}\n                                </div>\n                                <div>\n                                    <span className='font800'>Where are you based?</span>\n                                    <div>\n                                        <CountryDropdown className={style.dropdown} value={input.country} onChange={(val) => setInput({ ...input, country: val })} />\n                                        <RegionDropdown className={style.dropdown} country={input.country} value={input.region} onChange={(val) => setInput({ ...input, region: val })} />\n                                    </div>\n                                </div>\n                                <div className={style.inputDiv}>\n                                    <span className='font800'>Your bio</span>\n                                    <textarea name='description' value={input.description} onChange={(e) => handleInputChange(e)} maxLength='255' className={style.textarea}></textarea>\n                                </div>\n                            </div>\n                        </div>\n                        <h3 className='font800' id='giveMargin'>Social profiles</h3>\n                        <div id={style.socialDiv}>\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\n                                <span className='font800'><FontAwesomeIcon icon={faGithubSquare} /> GitHub</span>\n                                <input style={{ border: errors.gitHub ? '2px solid red' : '2px solid #e7e7e7' }} value={input.gitHub} name='gitHub' onChange={(e) => handleInputChange(e)} className={style.input} />\n                                {errors.gitHub && <span className={style.errors}>Please enter a valid URL.</span>}\n                            </div>\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\n                                <span className='font800'><FontAwesomeIcon style={{ color: '#0e76a8' }} icon={faLinkedin} /> LinkedIn</span>\n                                <input style={{ border: errors.linkedIn ? '2px solid red' : '2px solid #e7e7e7' }} value={input.linkedIn} name='linkedIn' onChange={(e) => handleInputChange(e)} className={style.input} />\n                                {errors.linkedIn && <span className={style.errors}>Please enter a valid URL.</span>}\n                            </div>\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\n                                <span className='font800'><FontAwesomeIcon style={{ color: ' #00acee' }} icon={faTwitterSquare} /> Twitter</span>\n                                <input style={{ border: errors.twitter ? '2px solid red' : '2px solid #e7e7e7' }} value={input.twitter} name='twitter' onChange={(e) => handleInputChange(e)} className={style.input} />\n                                {errors.twitter && <span className={style.errors}>Please enter a valid URL.</span>}\n                            </div>\n                        </div>\n                        <h3 className='font800' id='giveLessMargin'>Your skills</h3>\n                        <div className='displayFlexColumn' id='alignItemsCenter'>\n                            <div id={style.skillDiv} className='displayFlex'>\n                                {selectedSkills && selectedSkills.map(skill =>\n                                    <div key={skill.id}>\n                                        <button style={{ background: skill.strongColor, color: skill.softColor }} name={skill.label} onClick={(e) => removeSkill(e)} id={style.skillBtn}><FontAwesomeIcon icon={faTimesCircle} /> {skill.label}</button>\n                                    </div>\n                                )}\n                            </div>\n                            <Hint options={skills}>\n                                <input onKeyDown={(e) => addSkill(e)} style={{ margin: '0px' }} className={style.input} placeholder='Press enter to add a skill' />\n                            </Hint>\n                        </div>\n                    </div>\n                    <div id={style.btnDiv}>\n                        <button onClick={() => window.location.replace(`/user/${user.username}`)} style={{ background: 'black', color: 'white' }} id={style.btn}>Discard changes</button>\n                        <button onClick={handleSubmit} disabled={btnDisabled} style={{ background: btnDisabled ? 'gray' : user.color, color: user.brightness === 'bright' ? '#fff' : '#000' }} id={style.btn}>Save changes</button>\n                    </div>\n                    {error && <Alert id='giveMargin' className='font800' color=\"danger\">\n                        Something failed — we are sorry!\n                    </Alert>}\n                </div>}\n                {loading &&\n                    <div id={style.form}>\n                        <img alt=\"Loading GIF\" src={Loading} />\n                    </div>}\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userInfo,\n        skills: state.allSkills\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setUserInfo: username => setUserInfo(username)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditUser);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/SuccessPage/SuccessPage.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/utils.js",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HeaderUser/SearchBar.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/PostStartup/UserSettingsCard.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobCardProfile.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/PopUps/RegisterPopUp.jsx",["238","239"],"import React, { useState } from 'react';\nimport style from './PopUpStyle.module.css';\nimport Popup from 'reactjs-popup';\nimport axios from 'axios';\nimport randomColor from 'randomcolor';\nimport { getBrightness } from '../../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nfunction RegisterPopUp({ isHomepage, isMain, isMainHomepage, isJobProfile }) {\n\n    const [input, setInput] = useState({});\n    const [showPass, setShowPass] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [disabled, setDisabled] = useState(false);\n\n    function handleInputChange(e) {\n        if (e.target.name === 'email') {\n            if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g.test(e.target.value))) {\n                setErrors({ ...errors, email: 'Please enter a valid email.' });\n                setDisabled(true);\n            } else {\n                setErrors({ ...errors, email: false });\n                setDisabled(false);\n            }\n        }\n        if (e.target.name === 'username' && errors.username) {\n            setErrors({ ...errors, username: false });\n            setDisabled(false);\n        }\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function handleSubmit() {\n        input.color = randomColor();\n        input.brightness = getBrightness(input.color);\n        input.profilePic = 'https://iupac.org/wp-content/uploads/2018/05/default-avatar.png';\n        axios.post('/auth/register', input)\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data));\n                window.location.replace('/edit/user/me');\n            })\n            .catch(err => {\n                setErrors({ ...errors, username: 'Username already taken', email: 'A user with this email already exists.' });\n                setDisabled(true);\n            })\n    }\n\n    function closePopUp(close) {\n        setErrors({});\n        setDisabled(false);\n        setInput({});\n        close();\n    }\n\n    return (\n        <Popup trigger={\n            isJobProfile ? <button id={style.applyBtn}>Apply to this job</button> : \n            isMain ? <button className={style.btn}>Post your startup.</button> :\n                isMainHomepage ? <button id={style.joinBtn}>Join FindDevs for free.</button> :\n                    isHomepage ?\n                        <span className={style.headerIcon}>join</span> :\n                        <span id={style.nonHomepage}>Join FindDevs</span>\n        } modal>\n            {close => (\n                <div>\n                    <div id={style.mainDiv}>\n                        <div id={style.form}>\n                            <button id={style.closeBtn} onClick={() => closePopUp(close)}><FontAwesomeIcon icon={faTimes} /></button>\n                            <h1 id={style.title}>Sign Up</h1>\n                            <span style={{ width: '85%' }}>Join <span className='font800'>FindDevs</span> today and get the boost your startup needs.</span>\n                            <div className={errors['username'] ? style.inputcontainerError : style.inputcontainer}>\n                                <input value={input.fullName} name='username' className={style.input} placeholder='Your username' onChange={(e) => handleInputChange(e)}></input>\n                            </div>\n                            {errors['username'] && <span id={style.alertSpan}>{errors['username']}</span>}\n                            <div className={errors['email'] ? style.inputcontainerError : style.inputcontainer}>\n                                <input value={input.email} name='email' className={style.input} placeholder='Email' onChange={(e) => handleInputChange(e)}></input>\n                            </div>\n                            {errors['email'] && <span id={style.alertSpan}>{errors['email']}</span>}\n                            <div className={errors['email'] ? style.inputcontainerError : style.inputcontainer} className={style.inputcontainer}>\n                                <input value={input.password} name='password' type={showPass ? 'text' : 'password'} className={style.input} placeholder='Password' onChange={(e) => handleInputChange(e)}></input>\n                                <button id={style.showPassBtn} onClick={() => setShowPass(!showPass)}>{showPass ? 'Hide' : 'Show'}</button>\n                            </div>\n                            {errors['password'] && <span id={style.alertSpan}>{errors['password']}</span>}\n                            <button disabled={!input.username || !input.password || !input.email || disabled ? true : false} id={style.createBtn} onClick={() => handleSubmit()} >Create your account.</button>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </Popup>\n    )\n}\n\n\nexport default RegisterPopUp","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/PopUps/Confirmation.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/PopUps/LoginPopUp.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/GoPremiumPopUp/GoPremium.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/UserCard/ProjectCard.jsx",["240"],"import React from 'react';\nimport style from './UserCard.module.css';\nimport { Link } from 'react-router-dom';\nimport Verification from '../../Media/Verification.png';\n\nfunction ProjectCard({ project }) {\n    return (\n        <div id={style.projectCard}>\n            <div id='alignItemsCenter' className='displayFlexColumn'>\n                <img alt=\"Project logo\" id={style.profilePic} src={project.logo} />\n                <div className='displayFlex' id='alignItemsCenter'>\n                    <span id={style.projectName} className='font800'>{project.name}</span>\n                    {project.isPremium && <img src={Verification} id={style.verification} />}\n                </div>\n                <p id={style.bio}>{project.oneLineDescription}</p>\n            </div>\n            <Link style={{ width: '100%' }} to={`/project/profile/${project.id}`}><button id={style.btn} style={{ background: project.mainColor }}>Go to profile</button></Link>\n        </div>\n    )\n}\n\nexport default ProjectCard;","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/UserCard/UserCardSearch.jsx",["241"],"import React, { useEffect, useState } from 'react';\nimport style from './UserCard.module.css';\nimport Verification from '../../Media/Verification.png';\nimport { Link } from 'react-router-dom';\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst useStyles = makeStyles(theme => ({\n    arrow: { color: \"#181a19\" }\n}));\n\nfunction UserCardSearch({ user }) {\n    const [extraSkills, setExtraSkills] = useState(null);\n    const [ESL, setESL] = useState(0);\n\n    useEffect(() => {\n        if (user.skills) {\n            const reduced = user.skills.slice(8).reduce((acc, curr, index) => index === user.skills.slice(8).length - 1 ? acc + curr.label : acc + `${curr.label}, `, '');\n            setExtraSkills(reduced);\n            setESL(user.skills.slice(8).length);\n        }\n    }, [])\n\n    const classes = useStyles();\n\n    const BlueOnGreenTooltip = withStyles({\n        tooltip: {\n            color: \"white\",\n            backgroundColor: \"#181a19\",\n            fontFamily: 'Nunito',\n            fontSize: '12px'\n        }\n    })(Tooltip);\n\n    return (\n        <div id={style.userCard}>\n            <div id='alignItemsCenter' className='displayFlexColumn'>\n                <img alt=\"Profile\" id={style.profilePic} src={user.profilePic} />\n                <div className='displayFlex' id='alignItemsCenter'>\n                    <span className='font800'><span style={{ color: user.color }}>@ </span>{user.username}</span>\n                    {user.isPremium && <img alt=\"Verification badge\" id={style.verification} src={Verification} />}\n                </div>\n            </div>\n            <p id={style.bio}>{user.description}</p>\n            <div className='justifyCenter' style={{ flexWrap: 'wrap' }}>\n                {user.skills && user.skills.slice(0, 8).map(skill =>\n                    <div key={skill.id} id={style.skillDiv}>\n                        <span\n                            style={{ background: `${skill.strongColor}`, color: skill.softColor }}\n                            id={style.skillSpan}>\n                            {skill.user_skills.isValidated && <FontAwesomeIcon style={{ marginRight: '5px' }} icon={faCheckCircle} />}{skill.label}\n                        </span>\n                    </div>\n                )}\n                {extraSkills &&\n                    <BlueOnGreenTooltip classes={{ arrow: classes.arrow }} id={style.tooltip} title={extraSkills} arrow>\n                        <span id={style.plusSearch}>+{ESL}</span>\n                    </BlueOnGreenTooltip>}\n            </div>\n            <Link style={{ width: '100%' }} to={`/user/${user.username}`}><button id={style.btn} style={{ background: user.color }}>Contact</button></Link>\n        </div>\n    )\n}\n\nexport default UserCardSearch;","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/UserCard/UserCard.jsx",["242"],"import React, { useState, useEffect } from 'react';\nimport style from './UserCard.module.css';\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Verification from '../../Media/Verification.png';\nimport { selectWorkers } from '../../Actions/index';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst useStyles = makeStyles(theme => ({\n    arrow: { color: \"#181a19\" }\n}));\n\nfunction UserCard({ user, setLoading, selectWorkers, skillSelection }) {\n\n    const [extraSkills, setExtraSkills] = useState(null);\n    const [extraSkillsLength, setExtraLength] = useState(0);\n\n    useEffect(() => {\n        if (user.skills) {\n            const reduced = user.skills.slice(8).reduce((acc, curr, index) => index === user.skills.slice(8).length - 1 ? acc + curr.label : acc + `${curr.label}, `, '');\n            setExtraSkills(reduced);\n            setExtraLength(user.skills.slice(8).length);\n        }\n    }, [])\n\n    const classes = useStyles();\n\n    const BlueOnGreenTooltip = withStyles({\n        tooltip: {\n            color: \"white\",\n            backgroundColor: \"#181a19\",\n            fontFamily: 'Nunito',\n            fontSize: '12px'\n        }\n    })(Tooltip);\n\n    function addSkill (skill) {\n        setLoading (true);\n        const dontRepeat = skillSelection.find (filtered => filtered.id === skill.id);\n        if (!dontRepeat) selectWorkers(skill);\n        setLoading (false);\n    }\n\n    return (\n        <div id={style.userCard}>\n            <div className='displayFlexColumn' id='alignItemsCenter'>\n                <img alt=\"Profile\" id={style.profilePic} src={user.profilePic} />\n                <div id='alignItemsCenter' className='displayFlex'>\n                    <span className='font800' style={{ alignSelf: 'flex-start' }}><span style={{ color: user.color }}>@ </span>{user.username}</span>\n                    {user.isPremium && <img alt=\"Verification badge\" id={style.verification} src={Verification} />}\n                </div>\n                <p id={style.bio}>{user.description}</p>\n            </div>\n            <div id='alignItemsCenter' className='justifyCenter' style={{ flexWrap: 'wrap' }}>\n                {user.skills && user.skills.slice(0, 8).map(skill =>\n                    <div key={skill.id} id={style.skillDiv}>\n                        <BlueOnGreenTooltip classes={{ arrow: classes.arrow }} id={style.tooltip} title='Add tag to filters' arrow>\n                            <span\n                                onClick={() => { addSkill (skill) }}\n                                style={{ background: `${skill.strongColor}`, color: skill.softColor }}\n                                id={style.skillSpan}>\n                                {skill.user_skills.isValidated && <FontAwesomeIcon style={{ marginRight: '5px' }} icon={faCheckCircle} />}{skill.label}\n                            </span>\n                        </BlueOnGreenTooltip>\n                    </div>\n                )}\n                {extraSkills &&\n                    <BlueOnGreenTooltip classes={{ arrow: classes.arrow }} id={style.tooltip} title={extraSkills} arrow>\n                        <span id={style.plus}>+{extraSkillsLength}</span>\n                    </BlueOnGreenTooltip>}\n            </div>\n            <Link id={style.link} to={`/user/${user.username}`}><button id={style.btn} style={{ background: user.color }}>Contact</button></Link>\n        </div>\n    )\n}\n\nfunction mapStateToProps (state) {\n    return {\n        skillSelection: state.skillSelection\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectWorkers: skill => dispatch(selectWorkers(skill))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserCard);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ProfileProjectCard/ProfileProjectCard.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HirePopUp/HirePopUp.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/JobListing/JobCard.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ProjectCard/ProjectCard.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/ApplicantsPopUp.jsx",["243"],"import React, { useEffect, useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport style from './ApplicantsPopUp.module.css';\nimport axios from 'axios';\nimport ApplicantsList from './ApplicantsList';\nimport Accepted from './Accepted';\n\nfunction ApplicantsPopUp({ job, projectName, brightness, projectLogo }) {\n\n    const [applicants, setApplicants] = useState([]);\n    const [decided, setDecided] = useState(null);\n\n    useEffect(() => {\n        axios.get(`/jobs/${job.id}/applicants`)\n            .then(applicantes => setApplicants(applicantes.data))\n            .catch(err => console.log(err))\n    }, [])\n\n    return (\n        <Popup trigger={<span style={{ color: brightness === 'bright' ? '#000' : '#fff', background: brightness === 'bright' ? '#fff' : '#000' }} id={style.editBtn}>Applicants</span>} modal>\n            {close => (\n                <div id={style.mainDiv}>\n                    {decided ? <Accepted decided={decided} projectName={projectName} /> : <ApplicantsList projectLogo={projectLogo} job={job} projectName={projectName} applicants={applicants} close={close} setApplicants={setApplicants} setDecided={setDecided} />}\n                </div>\n            )}\n        </Popup>\n    )\n}\n\nexport default ApplicantsPopUp","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HirePopUp/JobCard.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/MembersPopUp.jsx",["244"],"import React, { useEffect, useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport style from './ApplicantsPopUp.module.css';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport ChangeRole from './ChangeRole';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faUsers, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction MembersPopUp({ projectID, userInfo, brightness, isFounder }) {\n\n    const [project, setProject] = useState({});\n    const [changeRole, setChangeRole] = useState(false);\n    const [copied, setCopied] = useState(false);\n    const [fire, setFire] = useState(false);\n\n    useEffect(() => {\n        axios.get(`/projects/${projectID}`)\n            .then(projectData => setProject(projectData.data))\n            .catch(err => console.log(err))\n    }, [])\n\n    function copiedFunction() {\n        setCopied(true);\n        setTimeout(() => {\n            setCopied(false);\n        }, 3000)\n    }\n\n    function fireUser(userID) {\n        axios.delete(`/projects/${projectID}/${userID}/fire`)\n            .then(res => window.location.reload())\n            .catch(err => console.log(err))\n    }\n\n    return (\n        <Popup trigger={\n            <div style={{ color: brightness === 'bright' ? '#fff' : '#000', border: brightness === 'bright' ? '2px solid #fff' : '2px solid #000' }} className={style.redirectDiv}>\n                <span><FontAwesomeIcon icon={faUsers} /> Members</span>\n            </div>}\n            modal>\n            {close => (\n                <div id={style.mainDiv}>\n                    {!changeRole ?\n                        <div id={style.memberForm}>\n                            <button id={style.closeBtn} onClick={close}><FontAwesomeIcon icon={faTimes} /></button>\n                            <h1 className='font200'><span className='font800'>{project.name}</span> members</h1>\n                            <div id={style.topApplicantDiv}>\n                                {project.users && project.users.map(user =>\n                                    user.userXprojects.endDate === null &&\n                                    <div key={user.id} id={style.applicantDiv}>\n                                        <div className='displayFlex' id='alignItemsCenter'>\n                                            <div id={style.profilePic}></div>\n                                            <div id={style.memberInfo}>\n                                                <span className='font800'>{`@ ${user.username}`}</span>\n                                                <span className='font200'>{user.userXprojects.role}</span>\n                                            </div>\n                                        </div>\n                                        {user.username !== userInfo.username &&\n                                            <div id={style.socialMediaDiv2}>\n                                                {isFounder && <button onClick={() => setChangeRole(user)} id={style.btn}>CHANGE ROLE</button>}\n                                                <Link to={`/user/${user.username}?verify`}><button id={style.btn}>VALIDATE</button></Link>\n                                                <CopyToClipboard text={user.email}><button id={style.btn} onClick={copiedFunction} >CONTACT</button></CopyToClipboard>\n                                                {isFounder && <button onClick={() => setFire(user)} id={style.btn}>FIRE</button>}\n                                            </div>}\n                                    </div>\n                                )}\n                            </div>\n                        </div> :\n                        <ChangeRole userData={changeRole} setChangeRole={setChangeRole} projectName={project.name} />}\n                    {copied && <Alert id={style.copiedAlert} color=\"success\">Copied user's contact email to clipboard!</Alert>}\n                    {fire &&\n                        <Alert id={style.copiedAlert} color=\"danger\">\n                            Are you sure you want to fire {fire.username}?\n                            <button className={style.actionBtn} onClick={() => fireUser(fire.id)}><FontAwesomeIcon icon={faCheckCircle} /></button>\n                            <button onClick={() => setFire(false)} className={style.actionBtn}><FontAwesomeIcon icon={faTimesCircle} /></button>\n                        </Alert>}\n                </div>\n            )}\n        </Popup>\n    )\n}\n\nfunction mapDispatchToProps(state) {\n    return {\n        userInfo: state.userInfo\n    }\n}\n\nexport default connect(mapDispatchToProps, null)(MembersPopUp);","/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/ApplicantsList.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/Accepted.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/ApplicantsPopUp/ChangeRole.jsx",[],"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Screens/TermsAndConditions/Terms.jsx",["245"],"import React from 'react';\nimport style from './Terms.module.css';\n\nfunction Terms() {\n    return (\n        <div className='displayFlexColumn' id='alignItemsCenter'>\n            <div id={style.mainDiv}>\n                <h1 id={style.mainTitle}>Privacy Policy</h1>\n                <p>\n                    Thank you for choosing to be part of our community at FindDevs\n                    (\"<span className='font800'>Company</span>\", \"<span className='font800'>we</span>\", \"<span className='font800'>us</span>\", \"<span className='font800'>our</span>\"). We are committed to protecting your\n                    personal information and your right to privacy. If you have any questions or\n                    concerns about this privacy notice, or our practices with regards to your personal information,\n                    please contact us at contact@finddevs.io.\n                </p>\n                <p>\n                    When you visit our website <a href=\"https://www.finddevs.io\" target=\"_blank\">https://www.finddevs.io</a> (the \"<span className='font800'>Website</span>\"), and more\n                    generally, use any of our services (the \"<span className='font800'>Services</span>\", which include the Website),\n                    we appreciate that you are trusting us with your personal information. We take your privacy very seriously. In this privacy notice, we\n                    seek to explain to you in the clearest way possible what information we\n                    collect, how we use it and what rights you have in relation to it. We hope you take some time to read through it carefully, as it is important. If there are any\n                    terms in this policy notice that you do not agree with, please discontinue\n                    use of our Services immediately.\n                </p>\n                <p>\n                    This privacy notice applies to all information collected through our Services\n                    (which, as described above, includes our Website), as well as, any related\n                    services, sales, marketing or events.\n                </p>\n                <p className='font800'>\n                    Please read this privacy notice carefully as it will help you understand what we do with the information that we collect.\n                </p>\n                <h2 className={style.title}>1. What information do we collect?</h2>\n                <h3 className={style.title}>Personal information you disclose to us</h3>\n                <p className={style.inShort}><span className=\"font800\">In Short: </span>We collect personal information that your provide to us.</p>\n                <p>\n                    We collect personal information that you voluntarily provide to us when you\n                    register on the Website, express an interest in obtaining information about us\n                    or our products and Services, when you participate in activities on the Website (such as by posting messages in our online forums or entering\n                    competitions, contests and giveaways) or otherwise when you contact us.\n                </p>\n                <p>\n                    The personal information that we collect depends on the context of your\n                    interactions with us and the Website, the choices you make and the products\n                    and features you use. The personal information we collect may include the following:\n                </p>\n                <p><span className='font800'>Personal Information Provided by You.</span> We collect email\n                addresses; usernames; passwords; location; and other similar information.</p>\n                <p>\n                    All personal information that you provide to us must be true, complete and\n                    accurate, and you must notify us of any changes to such personal information.\n                </p>\n                <h2 className={style.title}>2. How do we use your information</h2>\n                <p className={style.inShort}><span className=\"font800\">In Short: </span>We process your information for purposes based on legitimate\n                business interests, the fulfillment of our contract with you, compliance with\n                our legal obligations, and/or your consent</p>\n                <p>\n                    We use personal information collected via our Website for a variety of business purposes\n                    described below. We process your personal information\n                    for these purposes in reliance on our legitimate business interests, in order\n                    to enter into or perform a contract with you, with your consent, and/or for\n                    compliance with our legal obligations. We indicate the specific processing\n                    grounds we rely on next to each purpose listed below.\n                </p>\n                <p>\n                    We use the information we collect or receive:\n                    <ul id='giveMargin'>\n                        <li id={style.li}>\n                            <span className='font800'>To send administrative information to you.</span> We may use your\n                            personal information to send you product, service and new feature\n                            information and/or information about changes to our terms, conditions,\n                            and policies.\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>To protect our Services.</span> We may use your information as part of our\n                            efforts to keep our Website safe and secure (for example, for fraud)\n                            monitoring and prevention.\n                        </li>\n                        <li id={style.li} className='font800'>\n                            To enforce our terms, conditions and policies for business\n                            purposes, to comply with legal and regulatory requirements or in\n                            connection with our contract.\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>To respond to legal requests and prevent harm.</span> If we receive a\n                            subpoena or other legal request, we may need to inspect the data we\n                            hold to determine how to respond.\n                        </li>\n                    </ul>\n                </p>\n                <h2 className={style.title}>3. Will your information be shared with anyone?</h2>\n                <p className={style.inShort}><span className=\"font800\">In Short: </span>We only share information with your consent, to comply with laws,\n                to provide you with services, to protect your rights, or to fulfill business\n                obligations.</p>\n                <p>\n                    We may process or share your data that we hold based on the following legal basis:\n                    <ul id='giveMargin'>\n                        <li id={style.li}>\n                            <span className='font800'>Consent:</span> We may process your data if you have given us specific consent\n                            to use your personal information for a specific purpose.\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>Legitimate Interests: </span> We may process your data when it is\n                            reasonably necessary to achieve our legitimate business interests.\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>Performance of a Contract:</span> Where we have entered into a contract\n                            with you, we may process your personal information to fulfill the terms\n                            of our contract.\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>Legal Obligations:</span> We may disclose your information where we are\n                            legally required to do so in order to comply with applicable law,\n                            governmental requests, a judicial proceeding, court order, or legal\n                            process, such as in response to a court order or a subpoena\n                            (including in response to public authorities to meet national security or\n                            law enforcement requirements.)\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>Vital Interests:</span> We may disclose your information where we believe it \n                            is necessary to investigate, prevent, or take action regarding potential\n                            violations of our policies, suspected fraud, situations involving\n                            potential threats to the safety of any person and illegal activities, or as \n                            evidence in litigation in which we are involed.\n                        </li>\n                    </ul>\n                </p>\n                <p>\n                    More specifically, we may need to process your data or share your personal \n                    information in the following situations:\n                    <ul id='giveMargin'>\n                        <li id={style.li}>\n                            <span className='font800'>Business Transfers.</span> We may share or transfer your information in\n                            connection with, or during negotiations of, any merger, sale of company \n                            assets, financing, or acquisition of all or a portion of our\n                            business to another company.\n                        </li>\n                        <li id={style.li}>\n                            <span className='font800'>Other users.</span> When you share personal information (for example, by\n                            posting comments, contributions or other content to the Website) or\n                            otherwise interact with public areas of the Website, such personal\n                            information may be viewed by all users and may be publicly made\n                            available outside the Website in perpetuity. Similarly, other users will\n                            be able to view descriptions of your activity, communicate with you\n                            withing our Website, and view your profile.\n                        </li>\n                    </ul>\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default Terms;\n\n",{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":38,"column":8,"nodeType":"252","endLine":38,"endColumn":10,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":55,"column":26,"nodeType":"256","messageId":"257","endLine":55,"endColumn":27},{"ruleId":"258","severity":1,"message":"259","line":56,"column":72,"nodeType":"260","messageId":"261","endLine":60,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":56,"column":79,"nodeType":"260","messageId":"264","endLine":56,"endColumn":81},{"ruleId":"254","severity":1,"message":"255","line":73,"column":26,"nodeType":"256","messageId":"257","endLine":73,"endColumn":27},{"ruleId":"254","severity":1,"message":"265","line":74,"column":30,"nodeType":"256","messageId":"257","endLine":74,"endColumn":31},{"ruleId":"254","severity":1,"message":"255","line":78,"column":26,"nodeType":"256","messageId":"257","endLine":78,"endColumn":27},{"ruleId":"258","severity":1,"message":"259","line":79,"column":66,"nodeType":"260","messageId":"261","endLine":83,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":79,"column":70,"nodeType":"260","messageId":"264","endLine":79,"endColumn":72},{"ruleId":"262","severity":1,"message":"266","line":93,"column":66,"nodeType":"260","messageId":"264","endLine":93,"endColumn":68},{"ruleId":"254","severity":1,"message":"267","line":110,"column":17,"nodeType":"256","messageId":"257","endLine":110,"endColumn":30},{"ruleId":"262","severity":1,"message":"266","line":110,"column":60,"nodeType":"260","messageId":"264","endLine":110,"endColumn":62},{"ruleId":"250","severity":1,"message":"268","line":51,"column":8,"nodeType":"252","endLine":51,"endColumn":10,"suggestions":"269"},{"ruleId":"270","severity":1,"message":"271","line":60,"column":54,"nodeType":"272","messageId":"273","endLine":60,"endColumn":55,"suggestions":"274"},{"ruleId":"270","severity":1,"message":"271","line":60,"column":107,"nodeType":"272","messageId":"273","endLine":60,"endColumn":108,"suggestions":"275"},{"ruleId":"250","severity":1,"message":"276","line":42,"column":8,"nodeType":"252","endLine":42,"endColumn":14,"suggestions":"277"},{"ruleId":"250","severity":1,"message":"278","line":43,"column":8,"nodeType":"252","endLine":43,"endColumn":10,"suggestions":"279"},{"ruleId":"250","severity":1,"message":"276","line":43,"column":8,"nodeType":"252","endLine":43,"endColumn":10,"suggestions":"280"},{"ruleId":"281","severity":1,"message":"282","line":124,"column":41,"nodeType":"272","messageId":"283","endLine":126,"endColumn":60},{"ruleId":"250","severity":1,"message":"284","line":42,"column":8,"nodeType":"252","endLine":42,"endColumn":14,"suggestions":"285"},{"ruleId":"250","severity":1,"message":"286","line":24,"column":8,"nodeType":"252","endLine":24,"endColumn":15,"suggestions":"287"},{"ruleId":"250","severity":1,"message":"288","line":42,"column":8,"nodeType":"252","endLine":42,"endColumn":22,"suggestions":"289"},{"ruleId":"270","severity":1,"message":"271","line":51,"column":54,"nodeType":"272","messageId":"273","endLine":51,"endColumn":55,"suggestions":"290"},{"ruleId":"270","severity":1,"message":"271","line":51,"column":107,"nodeType":"272","messageId":"273","endLine":51,"endColumn":108,"suggestions":"291"},{"ruleId":"250","severity":1,"message":"292","line":39,"column":8,"nodeType":"252","endLine":39,"endColumn":10,"suggestions":"293"},{"ruleId":"250","severity":1,"message":"276","line":38,"column":8,"nodeType":"252","endLine":38,"endColumn":10,"suggestions":"294"},{"ruleId":"295","severity":1,"message":"296","line":6,"column":43,"nodeType":"256","messageId":"297","endLine":6,"endColumn":60},{"ruleId":"250","severity":1,"message":"276","line":63,"column":8,"nodeType":"252","endLine":63,"endColumn":14,"suggestions":"298"},{"ruleId":"270","severity":1,"message":"299","line":90,"column":24,"nodeType":"272","messageId":"273","endLine":90,"endColumn":25,"suggestions":"300"},{"ruleId":"270","severity":1,"message":"271","line":94,"column":54,"nodeType":"272","messageId":"273","endLine":94,"endColumn":55,"suggestions":"301"},{"ruleId":"270","severity":1,"message":"271","line":94,"column":107,"nodeType":"272","messageId":"273","endLine":94,"endColumn":108,"suggestions":"302"},{"ruleId":"270","severity":1,"message":"299","line":19,"column":25,"nodeType":"272","messageId":"273","endLine":19,"endColumn":26,"suggestions":"303"},{"ruleId":"304","severity":1,"message":"305","line":83,"column":113,"nodeType":"306","endLine":83,"endColumn":145},{"ruleId":"307","severity":1,"message":"308","line":13,"column":43,"nodeType":"309","endLine":13,"endColumn":93},{"ruleId":"250","severity":1,"message":"310","line":24,"column":8,"nodeType":"252","endLine":24,"endColumn":10,"suggestions":"311"},{"ruleId":"250","severity":1,"message":"312","line":27,"column":8,"nodeType":"252","endLine":27,"endColumn":10,"suggestions":"313"},{"ruleId":"250","severity":1,"message":"314","line":17,"column":8,"nodeType":"252","endLine":17,"endColumn":10,"suggestions":"315"},{"ruleId":"250","severity":1,"message":"292","line":24,"column":8,"nodeType":"252","endLine":24,"endColumn":10,"suggestions":"316"},{"ruleId":"317","severity":1,"message":"318","line":17,"column":48,"nodeType":"309","endLine":17,"endColumn":98},"no-native-reassign",["319"],"no-negated-in-lhs",["320"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getJobs', 'getNotifications', 'getUsers', 'setGlobalSkills', 'setProjects', and 'setUserInfo'. Either include them or remove the dependency array. If 'setGlobalSkills' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["321"],"no-redeclare","'i' is already defined.","Identifier","redeclared","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'j' is already defined.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'filteredArray' is already defined.","React Hook useEffect has missing dependencies: 'asyncUseEffect', 'projectID', 'user.id', and 'user.username'. Either include them or remove the dependency array.",["322"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["323","324"],["325","326"],"React Hook useLayoutEffect has a missing dependency: 'asyncUseEffect'. Either include it or remove the dependency array.",["327"],"React Hook useEffect has missing dependencies: 'pathname.search' and 'username'. Either include them or remove the dependency array.",["328"],["329"],"no-multi-str","Multiline support is limited to browsers supporting ES5 only.","multilineString","React Hook useLayoutEffect has missing dependencies: 'asyncUseEffect' and 'jobID'. Either include them or remove the dependency array.",["330"],"React Hook useLayoutEffect has missing dependencies: 'pathname.search' and 'projects'. Either include them or remove the dependency array. If 'setSuggestions' needs the current value of 'pathname.search', you can also switch to useReducer instead of useState and read 'pathname.search' in the reducer.",["331"],"React Hook useLayoutEffect has missing dependencies: 'asyncUseEffect' and 'user.username'. Either include them or remove the dependency array.",["332"],["333","334"],["335","336"],"React Hook useEffect has a missing dependency: 'projectID'. Either include it or remove the dependency array.",["337"],["338"],"no-unused-vars","'CountryRegionData' is defined but never used.","unusedVar",["339"],"Unnecessary escape character: \\..",["340","341"],["342","343"],["344","345"],["346","347"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'user.skills'. Either include it or remove the dependency array. If 'setESL' needs the current value of 'user.skills', you can also switch to useReducer instead of useState and read 'user.skills' in the reducer.",["348"],"React Hook useEffect has a missing dependency: 'user.skills'. Either include it or remove the dependency array. If 'setExtraLength' needs the current value of 'user.skills', you can also switch to useReducer instead of useState and read 'user.skills' in the reducer.",["349"],"React Hook useEffect has a missing dependency: 'job.id'. Either include it or remove the dependency array.",["350"],["351"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"messageId":"356","fix":"357","desc":"358"},{"messageId":"359","fix":"360","desc":"361"},{"messageId":"356","fix":"362","desc":"358"},{"messageId":"359","fix":"363","desc":"361"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"messageId":"356","fix":"376","desc":"358"},{"messageId":"359","fix":"377","desc":"361"},{"messageId":"356","fix":"378","desc":"358"},{"messageId":"359","fix":"379","desc":"361"},{"desc":"380","fix":"381"},{"desc":"368","fix":"382"},{"desc":"364","fix":"383"},{"messageId":"356","fix":"384","desc":"358"},{"messageId":"359","fix":"385","desc":"361"},{"messageId":"356","fix":"386","desc":"358"},{"messageId":"359","fix":"387","desc":"361"},{"messageId":"356","fix":"388","desc":"358"},{"messageId":"359","fix":"389","desc":"361"},{"messageId":"356","fix":"390","desc":"358"},{"messageId":"359","fix":"391","desc":"361"},{"desc":"392","fix":"393"},{"desc":"392","fix":"394"},{"desc":"395","fix":"396"},{"desc":"380","fix":"397"},"Update the dependencies array to be: [getJobs, getNotifications, getUsers, setGlobalSkills, setProjects, setUserInfo]",{"range":"398","text":"399"},"Update the dependencies array to be: [asyncUseEffect, projectID, user.id, user.username]",{"range":"400","text":"401"},"removeEscape",{"range":"402","text":"403"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"404","text":"405"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"406","text":"403"},{"range":"407","text":"405"},"Update the dependencies array to be: [asyncUseEffect, user]",{"range":"408","text":"409"},"Update the dependencies array to be: [pathname.search, username]",{"range":"410","text":"411"},"Update the dependencies array to be: [asyncUseEffect]",{"range":"412","text":"413"},"Update the dependencies array to be: [asyncUseEffect, jobID, user]",{"range":"414","text":"415"},"Update the dependencies array to be: [pathname.search, projects, users]",{"range":"416","text":"417"},"Update the dependencies array to be: [asyncUseEffect, limitOfPosts, user.username]",{"range":"418","text":"419"},{"range":"420","text":"403"},{"range":"421","text":"405"},{"range":"422","text":"403"},{"range":"423","text":"405"},"Update the dependencies array to be: [projectID]",{"range":"424","text":"425"},{"range":"426","text":"413"},{"range":"427","text":"409"},{"range":"428","text":"403"},{"range":"429","text":"405"},{"range":"430","text":"403"},{"range":"431","text":"405"},{"range":"432","text":"403"},{"range":"433","text":"405"},{"range":"434","text":"403"},{"range":"435","text":"405"},"Update the dependencies array to be: [user.skills]",{"range":"436","text":"437"},{"range":"438","text":"437"},"Update the dependencies array to be: [job.id]",{"range":"439","text":"440"},{"range":"441","text":"425"},[1810,1812],"[getJobs, getNotifications, getUsers, setGlobalSkills, setProjects, setUserInfo]",[2209,2211],"[asyncUseEffect, projectID, user.id, user.username]",[2615,2616],"",[2615,2615],"\\",[2668,2669],[2668,2668],[1760,1766],"[asyncUseEffect, user]",[2192,2194],"[pathname.search, username]",[1756,1758],"[asyncUseEffect]",[1785,1791],"[asyncUseEffect, jobID, user]",[1028,1035],"[pathname.search, projects, users]",[1809,1823],"[asyncUseEffect, limitOfPosts, user.username]",[2227,2228],[2227,2227],[2280,2281],[2280,2280],[1378,1380],"[projectID]",[1583,1585],[2424,2430],[3363,3364],[3363,3363],[3699,3700],[3699,3699],[3752,3753],[3752,3752],[738,739],[738,738],[979,981],"[user.skills]",[1139,1141],[614,616],"[job.id]",[998,1000]]