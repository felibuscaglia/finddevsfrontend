[{"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\index.js":"1","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\App.js":"3","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Store\\index.js":"4","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Actions\\index.js":"5","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Reducers\\index.js":"6","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HeaderUser\\HeaderUser.jsx":"7","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\Footer\\Footer.jsx":"8","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\UserProfile\\UserProfile.jsx":"9","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\StartupAdminPanel\\StartupAdminPanel.jsx":"10","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\Homepage\\Homepage.jsx":"11","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\Header\\Header.jsx":"12","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\PostStartup\\ProjectSettings.jsx":"13","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\ProjectProfile\\ProjectProfile.jsx":"14","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\StartupAdminPanel\\JobPanel\\JobPanel.jsx":"15","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\PostStartup\\PostStartup.jsx":"16","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\WorkersList\\WorkersList.jsx":"17","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobListing\\JobListings.jsx":"18","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\AddJob\\AddJob.jsx":"19","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobInfo\\JobInfo.jsx":"20","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\Suggestions\\Suggestions.jsx":"21","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\SuccessPage\\SuccessPage.jsx":"22","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\NotFound\\NotFound.jsx":"23","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\EditUser\\EditUser.jsx":"24","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\TermsAndConditions\\Privacy.jsx":"25","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\utils.js":"26","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HeaderUser\\SearchBar.jsx":"27","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\PopUps\\RegisterPopUp.jsx":"28","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HirePopUp\\HirePopUp.jsx":"29","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ProfileProjectCard\\ProfileProjectCard.jsx":"30","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ProjectCard\\ProjectCard.jsx":"31","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\GoPremiumPopUp\\GoPremium.jsx":"32","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\UserCard\\UserCardSearch.jsx":"33","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\UserCard\\ProjectCard.jsx":"34","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobListing\\JobCard.jsx":"35","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\UserCard\\UserCard.jsx":"36","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobListing\\JobCardProfile.jsx":"37","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\PostStartup\\UserSettingsCard.jsx":"38","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\PopUps\\Confirmation.jsx":"39","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\PopUps\\LoginPopUp.jsx":"40","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HirePopUp\\JobCard.jsx":"41","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\MembersPopUp.jsx":"42","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\ApplicantsPopUp.jsx":"43","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\Accepted.jsx":"44","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\ApplicantsList.jsx":"45","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\ChangeRole.jsx":"46"},{"size":896,"mtime":1615427623396,"results":"47","hashOfConfig":"48"},{"size":375,"mtime":1615427623396,"results":"49","hashOfConfig":"48"},{"size":4247,"mtime":1615427623352,"results":"50","hashOfConfig":"48"},{"size":348,"mtime":1615427623395,"results":"51","hashOfConfig":"48"},{"size":2220,"mtime":1615427623351,"results":"52","hashOfConfig":"48"},{"size":5362,"mtime":1615427623381,"results":"53","hashOfConfig":"48"},{"size":9537,"mtime":1615427623357,"results":"54","hashOfConfig":"48"},{"size":1273,"mtime":1615427623354,"results":"55","hashOfConfig":"48"},{"size":8001,"mtime":1615428530864,"results":"56","hashOfConfig":"48"},{"size":4579,"mtime":1615427623391,"results":"57","hashOfConfig":"48"},{"size":4063,"mtime":1615427623384,"results":"58","hashOfConfig":"48"},{"size":965,"mtime":1615427623356,"results":"59","hashOfConfig":"48"},{"size":11132,"mtime":1615427623388,"results":"60","hashOfConfig":"48"},{"size":6141,"mtime":1615427623389,"results":"61","hashOfConfig":"48"},{"size":3600,"mtime":1615427623390,"results":"62","hashOfConfig":"48"},{"size":10767,"mtime":1615427623388,"results":"63","hashOfConfig":"48"},{"size":5269,"mtime":1615427623395,"results":"64","hashOfConfig":"48"},{"size":3237,"mtime":1615427623386,"results":"65","hashOfConfig":"48"},{"size":7874,"mtime":1615427623382,"results":"66","hashOfConfig":"48"},{"size":5280,"mtime":1615427623384,"results":"67","hashOfConfig":"48"},{"size":3677,"mtime":1615427623393,"results":"68","hashOfConfig":"48"},{"size":1593,"mtime":1615427623392,"results":"69","hashOfConfig":"48"},{"size":590,"mtime":1615427623387,"results":"70","hashOfConfig":"48"},{"size":13064,"mtime":1615427623383,"results":"71","hashOfConfig":"48"},{"size":23865,"mtime":1615427623393,"results":"72","hashOfConfig":"48"},{"size":1121,"mtime":1615427623397,"results":"73","hashOfConfig":"48"},{"size":677,"mtime":1615427623357,"results":"74","hashOfConfig":"48"},{"size":5210,"mtime":1615427623360,"results":"75","hashOfConfig":"48"},{"size":5218,"mtime":1615427623358,"results":"76","hashOfConfig":"48"},{"size":1292,"mtime":1615427623361,"results":"77","hashOfConfig":"48"},{"size":2730,"mtime":1615427623361,"results":"78","hashOfConfig":"48"},{"size":5528,"mtime":1615427623355,"results":"79","hashOfConfig":"48"},{"size":2997,"mtime":1615427623363,"results":"80","hashOfConfig":"48"},{"size":1020,"mtime":1615427623362,"results":"81","hashOfConfig":"48"},{"size":4091,"mtime":1615427623385,"results":"82","hashOfConfig":"48"},{"size":4055,"mtime":1615427623362,"results":"83","hashOfConfig":"48"},{"size":2317,"mtime":1615427623385,"results":"84","hashOfConfig":"48"},{"size":1325,"mtime":1615427623389,"results":"85","hashOfConfig":"48"},{"size":1800,"mtime":1615427623359,"results":"86","hashOfConfig":"48"},{"size":3064,"mtime":1615427623359,"results":"87","hashOfConfig":"48"},{"size":2772,"mtime":1615427623359,"results":"88","hashOfConfig":"48"},{"size":4911,"mtime":1615427623354,"results":"89","hashOfConfig":"48"},{"size":1275,"mtime":1615427623353,"results":"90","hashOfConfig":"48"},{"size":904,"mtime":1615427623352,"results":"91","hashOfConfig":"48"},{"size":4909,"mtime":1615432414292,"results":"92","hashOfConfig":"48"},{"size":1454,"mtime":1615427623354,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1d241ts",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"96"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"96"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\index.js",[],["205","206"],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\App.js",["207"],"import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Header from './Components/Header/Header';\r\nimport Homepage from './Screens/Homepage/Homepage';\r\nimport UserProfile from './Screens/UserProfile/UserProfile';\r\nimport Footer from './Components/Footer/Footer';\r\nimport HeaderUser from './Components/HeaderUser/HeaderUser';\r\nimport PostStartup from './Screens/PostStartup/PostStartup';\r\nimport ProjectProfile from './Screens/ProjectProfile/ProjectProfile';\r\nimport StartupAdminPanel from './Screens/StartupAdminPanel/StartupAdminPanel';\r\nimport JobPanel from './Screens/StartupAdminPanel/JobPanel/JobPanel';\r\nimport AddJob from './Screens/AddJob/AddJob';\r\nimport { connect } from 'react-redux';\r\nimport { setSkills, setUserInfo, setProjects, getUsers, getNotifications, getJobs } from './Actions/index';\r\nimport jwt from 'jsonwebtoken';\r\nimport JobListings from './Screens/JobListing/JobListings';\r\nimport SettingsPanel from './Screens/PostStartup/ProjectSettings';\r\nimport WorkersList from './Screens/WorkersList/WorkersList';\r\nimport JobInfo from './Screens/JobInfo/JobInfo';\r\nimport EditUser from './Screens/EditUser/EditUser';\r\nimport Suggestions from './Screens/Suggestions/Suggestions';\r\nimport NotFound from './Screens/NotFound/NotFound';\r\nimport SuccessPage from './Screens/SuccessPage/SuccessPage';\r\nimport TermsAndConditions from './Screens/TermsAndConditions/Privacy';\r\n\r\nfunction App({ setGlobalSkills, setUserInfo, setProjects, getUsers, getNotifications, getJobs }) {\r\n\r\n    useEffect(() => {\r\n        const user = jwt.decode(JSON.parse(localStorage.getItem('user')));\r\n        if (user) {\r\n            setUserInfo(user.username);\r\n            getNotifications(user.username);\r\n        }\r\n        setGlobalSkills();\r\n        setProjects();\r\n        getUsers();\r\n        getJobs();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Route exact path='/' component={Header} />\r\n            <Route path='/' render={({ location }) => < HeaderUser pathname={location} />} />\r\n            <Switch>\r\n                <Route exact path='/' component={Homepage} />\r\n                <Route exact path='/jobs' component={JobListings} />\r\n                <Route exact path='/user/:username' render={({ match, location }) => < UserProfile pathname={location} username={match.params.username} />} />\r\n                <Route exact path='/project/post' component={PostStartup} />\r\n                <Route exact path='/project/profile/:projectId' render={({ match }) => < ProjectProfile projectID={match.params.projectId} />} />\r\n                <Route exact path='/admin/panel' component={StartupAdminPanel} />\r\n                <Route exact path='/project/jobPanel/:projectId' render={({ match }) => < JobPanel projectID={match.params.projectId} />} />\r\n                <Route exact path='/project/addJob/:projectId' render={({ match }) => < AddJob projectID={match.params.projectId} />} />\r\n                <Route exact path='/project/settings/:projectId' render={({ match }) => <SettingsPanel projectID={match.params.projectId} />} />\r\n                <Route exact path='/job/info/:jobId' render={({ match }) => < JobInfo jobID={match.params.jobId} />} />\r\n                <Route exact path='/edit/user/me' component={EditUser} />\r\n                <Route exact path='/workers' component={WorkersList} />\r\n                <Route exact path='/suggestions' render={({ location }) => <Suggestions pathname={location} />} />\r\n                <Route exact path='/success' component={SuccessPage} />\r\n                <Route exact path='/privacy' component={TermsAndConditions} />\r\n                <NotFound />\r\n            </Switch>\r\n            <Route exact path='/' component={Footer} />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setGlobalSkills: nothing => dispatch(setSkills()),\r\n        setUserInfo: username => dispatch(setUserInfo(username)),\r\n        setProjects: nothing => dispatch(setProjects()),\r\n        getUsers: nothing => dispatch(getUsers()),\r\n        getNotifications: username => dispatch(getNotifications(username)),\r\n        getJobs: nothing => dispatch(getJobs())\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Store\\index.js",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Actions\\index.js",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Reducers\\index.js",["208","209","210","211","212","213","214","215","216","217","218"],"const initialState = {\r\n    allSkills: [],\r\n    userInfo: {},\r\n    projects: [],\r\n    users: [],\r\n    jobs: [],\r\n    skillSelection: [],\r\n    jobSkillSelection: [],\r\n    filteredWorkers: [],\r\n    filteredJobs: [],\r\n    notifications: [],\r\n    limitOfPosts: false\r\n}\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_GLOBAL_SKILLS':\r\n            return {\r\n                ...state,\r\n                allSkills: action.payload\r\n            }\r\n        case 'SET_USER_DATA':\r\n            const find = action.payload.projects.find (project => project.userXprojects.isFounder === true && !project.isDeleted && project.ownerId ===action.payload.id);\r\n            return {\r\n                ...state,\r\n                userInfo: action.payload,\r\n                limitOfPosts: find && !action.payload.isPremium ? true : false\r\n            }\r\n        case 'SET_PROJECTS':\r\n            return {\r\n                ...state,\r\n                projects: action.payload,\r\n            }\r\n        case 'GET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n                filteredWorkers: action.payload\r\n            }\r\n        case 'GET_JOBS':\r\n            return {\r\n                ...state,\r\n                jobs: action.payload,\r\n                filteredJobs: action.payload\r\n            }\r\n        case 'REMOVE_FILTER':\r\n            const preFilteredSkills = state.skillSelection.filter(skill => skill.id !== action.payload.id);\r\n            if (preFilteredSkills.length > 0) {\r\n                var firstFilteredWorkers = [];\r\n                for (var i = 0; i < state.users.length; i++) {\r\n                    for (var j = 0; j < state.users[i].skills.length; j++) {\r\n                        if (state.users[i].skills[j].id === preFilteredSkills[0].id) firstFilteredWorkers.push(state.users[i]);\r\n                    }\r\n                }\r\n                for (var i = 1; i < preFilteredSkills.length; i++) {\r\n                    firstFilteredWorkers = firstFilteredWorkers.filter(worker => {\r\n                        for (var j = 0; j < worker.skills.length; j++) {\r\n                            if (worker.skills[j].id === preFilteredSkills[i].id) return worker;\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                skillSelection: preFilteredSkills,\r\n                filteredWorkers: preFilteredSkills.length > 0 ? firstFilteredWorkers : state.users\r\n            }\r\n\r\n        case 'REMOVE_JOB_FILTER':\r\n            const preFilteredJobSkills = state.jobSkillSelection.filter(skill => skill.id !== action.payload.id);\r\n            if (preFilteredJobSkills.length > 0) {\r\n                var firstFilteredJobs = [];\r\n                for (var i = 0; i < state.jobs.length; i++) {\r\n                    for (var j = 0; j < state.jobs[i].skills.length; j++) {\r\n                        if (state.jobs[i].skills[j].id === preFilteredJobSkills[0].id) firstFilteredJobs.push(state.jobs[i]);\r\n                    }\r\n                }\r\n                for (var i = 1; i < preFilteredJobSkills.length; i++) {\r\n                    firstFilteredJobs = firstFilteredJobs.filter(job => {\r\n                        for (var j = 0; j < job.skills.length; j++) {\r\n                            if (job.skills[j].id === preFilteredJobSkills[i].id) return job;\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                jobSkillSelection: preFilteredJobSkills,\r\n                filteredJobs: preFilteredJobSkills.length > 0 ? firstFilteredJobs : state.jobs\r\n            }\r\n\r\n        case 'SELECT_WORKERS':\r\n            var filteredArray = state.filteredWorkers.map(worker => {\r\n                for (var i = 0; i < worker.skills.length; i++) {\r\n                    if (worker.skills[i].label === action.payload.label) return worker;\r\n                }\r\n            });\r\n            filteredArray = filteredArray.filter(worker => worker !== undefined);\r\n            filteredArray = filteredArray.sort((a, b) => {\r\n                return b.isPremium - a.isPremium\r\n            })\r\n            const found = state.allSkills.find(skill => skill.id === action.payload.id);\r\n            return {\r\n                ...state,\r\n                filteredWorkers: filteredArray,\r\n                skillSelection: state.skillSelection.concat(found)\r\n            }\r\n\r\n        case 'FILTER_JOBS':\r\n            var filteredArray = state.filteredJobs.map(job => {\r\n                for (var i = 0; i < job.skills.length; i++) {\r\n                    if (job.skills[i].label === action.payload.label) return job;\r\n                }\r\n            });\r\n            filteredArray = filteredArray.filter(job => job !== undefined);\r\n            const skillFound = state.allSkills.find(skill => skill.id === action.payload.id);\r\n            return {\r\n                ...state,\r\n                filteredJobs: filteredArray,\r\n                jobSkillSelection: state.jobSkillSelection.concat(skillFound)\r\n            }\r\n\r\n        case 'GET_NOTIFICATIONS':\r\n            return {\r\n                ...state,\r\n                notifications: action.payload\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nexport default rootReducer;","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HeaderUser\\HeaderUser.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\Footer\\Footer.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\UserProfile\\UserProfile.jsx",["219","220","221"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport style from './UserProfile.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport jwt from 'jsonwebtoken';\r\nimport HirePopUp from '../../Components/HirePopUp/HirePopUp';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ProjectCard from '../../Components/ProfileProjectCard/ProfileProjectCard';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport Logo from '../../Media/logo.png';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { faGithubSquare, faLinkedin, faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\r\nimport Verification from '../../Media/Verification.png';\r\n\r\nfunction UserProfile({ username, pathname }) {\r\n\r\n    const [user, setUser] = useState({});\r\n    const [isUser, setIsUser] = useState(false)\r\n    const [color, setColor] = useState(null);\r\n    const [hasWorked, setHasWorked] = useState(false);\r\n    const [hasCreated, setHasCreated] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [noUser, setNoUser] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const usuario = jwt.decode(JSON.parse(localStorage.getItem('user')));\r\n        if (!usuario) setNoUser(true);\r\n        axios.get(`/users/${username}`)\r\n            .then(res => {\r\n                if (res.data === null) window.location.replace('/error');\r\n                setUser(res.data);\r\n                setColor(res.data.color);\r\n                var userProjects = {};\r\n                if (res.data.projects.find(project => project.userXprojects.isFounder === true)) userProjects.own = true;\r\n                if (res.data.projects.find(project => project.userXprojects.isFounder === false)) userProjects.joined = true;\r\n                setHasCreated(userProjects);\r\n                if (usuario && usuario.username === res.data.username) setIsUser(true);\r\n                if (pathname.search === \"?verify\" && usuario && usuario.username !== res.data.username) setHasWorked(true);\r\n                setLoading(false);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    function validateSkill(skill) {\r\n        if (hasWorked) {\r\n            axios.post(`/skills/${username}/validate`, { skill: skill.label })\r\n                .then(res => window.location.reload())\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    const BlueOnGreenTooltip = withStyles({\r\n        tooltip: {\r\n            color: \"white\",\r\n            backgroundColor: \"#181a19\",\r\n            fontFamily: 'Nunito',\r\n            fontSize: '12px'\r\n        }\r\n    })(Tooltip);\r\n\r\n    return (\r\n        <div>\r\n            {loading ?\r\n                <img alt=\"Suggestions GIF\" id={style.loading} src={Loading} /> :\r\n                <div>\r\n                    <div id={style.cover} style={{ backgroundColor: color }}></div>\r\n                    <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                        <div id={style.socialMediaDiv} style={{ color: color }}>\r\n                            {isUser ? <Link className='link' to='/edit/user/me'><button style={{ background: color, color: user.brightness === 'bright' ? '#fff' : '#000' }} id={style.btn}>UPDATE PROFILE</button></Link> : noUser ? null : <HirePopUp applicantsNotifications={user.notifications} applicantUsername={user.username} color={color} />}\r\n                            {user.gitHub && <a target='_blank' rel=\"noreferrer\" href={user.gitHub} style={{ textDecoration: 'none', color: color }}><FontAwesomeIcon icon={faGithubSquare} /></a>}\r\n                            {user.linkedIn && <a target='_blank' rel=\"noreferrer\" href={user.linkedIn} style={{ textDecoration: 'none', color: color }}><FontAwesomeIcon icon={faLinkedin} /></a>}\r\n                            {user.twitter && <a target='_blank' rel=\"noreferrer\" href={user.twitter} style={{ textDecoration: 'none', color: color }}><FontAwesomeIcon icon={faTwitterSquare} /></a>}\r\n                        </div>\r\n                        <div style={{ border: `10px solid ${color}`, alignSelf: 'center', backgroundImage: `url(${user.profilePic})` }} id={style.profilePic}></div>\r\n                        <div className='displayFlex' id=\"alignItemsCenter\">\r\n                            <h3 className='font800'><span style={{ color: color }}>@ </span>{user.username}</h3>\r\n                            {user.isPremium ? <img src={Verification} id={style.verification} /> : null}\r\n                        </div>\r\n                        <span id={style.description}>{user.description}</span>\r\n                        <div id={style.datadiv}>\r\n                            {user.region && user.country ?\r\n                                <span>{user.region && user.country && `📍 ${user.region}, ${user.country}`}</span> :\r\n                                null\r\n                            }\r\n                            <div id={style.skillDiv}>\r\n                                {user.skills && user.skills.map(skill =>\r\n                                    hasWorked ?\r\n                                        <BlueOnGreenTooltip key={skill.user_skills.id} title={skill.user_skills.isValidated ? 'Already validated!' : `Validate @${username}'s skill!`}>\r\n                                            <div style={{ background: skill.strongColor, color: skill.softColor }} id={style.skillBtn} onClick={() => validateSkill(skill)}>\r\n                                                <span>{hasWorked && !skill.user_skills.isValidated && <FontAwesomeIcon icon={faPlusCircle} />} {skill.user_skills.isValidated ? <FontAwesomeIcon icon={faCheckCircle} /> : null} {skill.label}</span>\r\n                                            </div>\r\n                                        </BlueOnGreenTooltip> :\r\n                                        <div style={{ background: skill.strongColor, color: skill.softColor }} id={style.skillBtn} onClick={() => validateSkill(skill)}>\r\n                                            <span>{hasWorked && !skill.user_skills.isValidated && <FontAwesomeIcon icon={faPlusCircle} />} {skill.user_skills.isValidated ? <FontAwesomeIcon icon={faCheckCircle} /> : null} {skill.label}</span>\r\n                                        </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {hasCreated.own && <div className={style.projectDiv}>\r\n                            <h3 id={style.smallerTitles} className='font800'>Projects created</h3>\r\n                            <div id={style.mainProjectDiv}>\r\n                                {user.projects && user.projects.map(project => project.userXprojects.isFounder ? <ProjectCard key={project.id} isFounder={true} project={project} /> : null)}\r\n                            </div>\r\n                        </div>}\r\n                        {hasCreated.joined && <div className={style.projectDiv}>\r\n                            <h3 id={style.smallerTitles} className='font800'>Project joined</h3>\r\n                            <div id={style.mainProjectDiv}>\r\n                                {user.projects && user.projects.map(project => !project.userXprojects.isFounder ? <ProjectCard key={project.id} project={project} /> : null)}\r\n                            </div>\r\n                        </div>}\r\n                        {user.projects.length === 0 &&\r\n                            <div id={style.emptyDiv}>\r\n                                <img src={Logo} id={style.empty} />\r\n                                <h3 id={style.emptyTitle} className='font200'>{isUser ? \"You haven't joined or created any project.\" : \"This developer hasn't joined or created any project.\"}</h3>\r\n                            </div>}\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserProfile;","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\StartupAdminPanel\\StartupAdminPanel.jsx",["222"],"import React, { useState, useLayoutEffect } from 'react';\r\nimport Logo from '../../Media/invertedlogo.png';\r\nimport style from './StartupAdminPanel.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport ProjectCard from '../../Components/ProjectCard/ProjectCard';\r\nimport Empty from '../../Media/emptyJob.svg';\r\nimport jwt from 'jsonwebtoken';\r\nimport { setUserInfo } from '../../Actions/index';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport GoPremium from '../../Components/GoPremiumPopUp/GoPremium';\r\nimport { Alert } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDoorOpen, faTimesCircle, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction StartupAdminPanel({ user, limitOfPosts, setUserInfo }) {\r\n    const [projects, setProjects] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [alert, setAlert] = useState(false);\r\n\r\n    async function asyncUseEffect(username) {\r\n        await (setUserInfo(username));\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        if (!user.username) {\r\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n            if (user) {\r\n                asyncUseEffect(user.username);\r\n            } else window.location.replace('/error');\r\n        }\r\n        axios.get(`/users/${user.username}/projects`)\r\n            .then(projectsData => {\r\n                projectsData.data = projectsData.data.sort((a, b) => {\r\n                    return b.userXprojects.isFounder - a.userXprojects.isFounder\r\n                })\r\n                setProjects(projectsData.data)\r\n                setLoading(false);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [user])\r\n\r\n    function leaveProject () {\r\n        setLoading (true);\r\n        axios.delete (`/users/${user.id}/${alert.id}`)\r\n            .then (res => window.location.reload ())\r\n            .catch (err => setLoading (false))\r\n    }\r\n\r\n    if (loading) {\r\n        return <img alt=\"Loading GIF\" src={Loading} id={style.loading} />\r\n    }\r\n\r\n    return (\r\n        <div className='displayFlex'>\r\n            <div id={style.fixedDiv} >\r\n                <div id={style.logoDiv}>\r\n                    <img alt=\"Inverted FindDevs logo\" src={Logo} id={style.invertedLogo} />\r\n                </div>\r\n                <Link id={style.link} to={`/user/${user.username}`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Go back</span></Link>\r\n            </div>\r\n            <div id={style.secondDiv}>\r\n                <div id={style.projectDiv}>\r\n                    {projects.length > 0 && <h1 className='font800'>Your projects</h1>}\r\n                    {projects.length > 0 ? projects.map(project => project.userXprojects.endDate !== null ? null : project.userXprojects.isFounder ? <ProjectCard key={project.id} project={project} isFounder={true} /> : <ProjectCard setAlert={setAlert} key={project.id} project={project} isFounder={false} />) :\r\n                        <div id={style.emptyDiv}>\r\n                            <img alt=\"No jobs posted\" src={Empty} id={style.empty} />\r\n                            <div>\r\n                                <h1 id={style.emptyTitle}>Start gathering the team.</h1>\r\n                                <Link className='links' to='/project/post'><div id={style.addBtn2}>Post a project</div></Link>\r\n                            </div>\r\n                        </div>}\r\n                </div>\r\n                {projects.length === 0 ? null : limitOfPosts ? \r\n                <GoPremium isAdminPanel={true} /> : \r\n                <Link to='/project/post'><button id={style.postBtn}>Post a project</button></Link>\r\n                }\r\n                {alert && <Alert id={style.alert} color=\"danger\">Are you sure you want to leave {alert.name}? <div className='displayFlex' id='alignItemsCenter' onClick={() => setAlert (false)} ><FontAwesomeIcon id={style.pick} icon={faTimesCircle} /></div> <div onClick={ leaveProject } className='displayFlex' id='alignItemsCenter'><FontAwesomeIcon id={style.pick} icon={faCheckCircle} /></div></Alert>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userInfo,\r\n        limitOfPosts: state.limitOfPosts\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setUserInfo: username => dispatch(setUserInfo(username))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartupAdminPanel);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\Homepage\\Homepage.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\Header\\Header.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\PostStartup\\ProjectSettings.jsx",["223","224","225"],"import React, { useState, useEffect } from 'react';\r\nimport style from './PostStartup.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { BlockPicker } from 'react-color';\r\nimport { getBrightness } from '../../utils';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport UserCard from './UserSettingsCard';\r\nimport Confirmation from '../../Components/PopUps/Confirmation';\r\nimport { setUserInfo } from '../../Actions/index';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Alert } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDoorOpen, faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faProductHunt, faTwitterSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction ProjectSettings({ user, projectID, setUserInfo }) {\r\n\r\n    const [input, setInput] = useState({});\r\n    const [preview, setPreview] = useState(null);\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [firstCheck, setFirstCheck] = useState(true);\r\n    const [inputErrors, setInputErrors] = useState({});\r\n    const [btnDisabled, setDisabled] = useState(false);\r\n\r\n    async function asyncUseEffect(username) {\r\n        await (setUserInfo(username));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!user.username) {\r\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n            if (user) {\r\n                asyncUseEffect(user.username);\r\n            } else window.location.replace('/error');\r\n        }\r\n        axios.get(`/projects/${projectID}`)\r\n            .then(projectData => {\r\n                const userFound = projectData.data.users.find(member => member.id === user.id);\r\n                if (projectData.data.isDeleted || !userFound || !userFound.userXprojects.isFounder) window.location.replace('/error');\r\n                setPreview(projectData.data.logo)\r\n                setInput(projectData.data);\r\n                setTimeout(() => {\r\n                    setFirstCheck(false);\r\n                }, 2000)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    function handleInputChange(e) {\r\n        var copyOfErrors = inputErrors;\r\n        var noErrors = true;\r\n\r\n        if (e.hex) return setInput({ ...input, mainColor: e.hex });\r\n\r\n        if (e.target.name === 'website' || e.target.name === 'workZone' || e.target.name === 'productHunt' || e.target.name === 'twitter' || e.target.name === 'linkedIn') {\r\n            if (!/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(e.target.value)) copyOfErrors = { ...copyOfErrors, [e.target.name]: true };\r\n            else copyOfErrors = { ...copyOfErrors, [e.target.name]: false }\r\n        }\r\n\r\n        for (const key in copyOfErrors) if (copyOfErrors[key]) noErrors = false;\r\n\r\n        if (noErrors) setDisabled(false);\r\n        else setDisabled(true);\r\n\r\n        setInputErrors(copyOfErrors);\r\n\r\n        setInput({\r\n            ...input,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function handleSubmit() {\r\n        setLoading(true);\r\n        if (input.name === '') {\r\n            setError(true);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        input.brightness = getBrightness(input.mainColor);\r\n        axios.patch(`/projects/${projectID}`, input)\r\n            .then(res => {\r\n                if (file) {\r\n                    const newForm = new FormData();\r\n                    newForm.append('image', file);\r\n                    const config = {\r\n                        headers: {\r\n                            'content-type': 'multipart/form-data'\r\n                        }\r\n                    };\r\n                    return axios.post(`/projects/${projectID}/logo`, newForm, config);\r\n                } else return window.location.replace('/admin/panel')\r\n            })\r\n            .then(res => window.location.replace('/admin/panel'))\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n            })\r\n    }\r\n\r\n    function check(e) {\r\n        setFile(e.target.files[0]);\r\n        setPreview(URL.createObjectURL(e.target.files[0]));\r\n    }\r\n\r\n    if (firstCheck) {\r\n        return (\r\n            <img alt=\"Loading GIF\" src={Loading} id={style.firstCheck} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='displayFlex'>\r\n            <div id={style.fixedDiv} >\r\n                <div id={style.logoDivS}>\r\n                    <Link to={`/project/profile/${projectID}`}><img alt=\"Project logo redirect\" src={input.logo} id={style.invertedLogoSettings} /></Link>\r\n                </div>\r\n                <Link id={style.link} to={`/admin/panel`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Back to Admin Panel</span></Link>\r\n            </div>\r\n            <div id={style.secondDiv}>\r\n                <h1 className='font800'>Project Settings</h1>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Project name *</span>\r\n                    <input value={input.name} maxLength='255' onChange={(e) => handleInputChange(e)} name='name' className={style.input} />\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Logo *</span>\r\n                    <div id={style.profilePicDiv}>\r\n                        <div id={style.profilePic}><img alt=\"Project logo\" src={preview} ID={style.logo} /></div>\r\n                        <label for={style.fileDrop} id={style.logoLabel}>\r\n                            <FontAwesomeIcon icon={faCloudUploadAlt} /> Upload Logo\r\n                        </label>\r\n                        <input onChange={(e) => check(e)} id={style.fileDrop} type='file' />\r\n                    </div>\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span style={{ marginBottom: '25px' }} className='font600'>Main color *</span>\r\n                    <BlockPicker onChange={(e) => handleInputChange(e)} color={input.mainColor} triangle={'hide'} />\r\n                </div>\r\n                <div style={{ marginTop: '25px' }} className='displayFlexColumn'>\r\n                    <span className='font600'>Website</span>\r\n                    <input style={{ border: inputErrors.website ? '2px solid red' : '2px solid #e7e7e7' }} value={input.website} maxLength='255' onChange={(e) => handleInputChange(e)} name='website' className={style.input} />\r\n                    {inputErrors.website && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Work Zone *</span>\r\n                    <span className='advert'>Keep in mind that it will be your team's designated workspace. It can be a link to Slack,<br /> Flowdock or WebEx, for example.</span>\r\n                    <input style={{ border: inputErrors.workZone ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' onChange={(e) => handleInputChange(e)} value={input.workZone} name='workZone' className={style.input} />\r\n                    {inputErrors.workZone && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                </div>\r\n                <div id={style.socialDiv}>\r\n                    <div className='displayFlexColumn' id='alignItemsFS'>\r\n                        <span className='font800'><FontAwesomeIcon icon={faProductHunt} style={{ color: '#DA552F' }} /> Product Hunt</span>\r\n                        <input style={{ border: inputErrors.productHunt ? '2px solid red' : '2px solid #e7e7e7' }} value={input.productHunt} maxLength='255' name='productHunt' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\r\n                        {inputErrors.productHunt && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                    </div>\r\n                    <div className='displayFlexColumn' id='alignItemsFS'>\r\n                        <span className='font800'><FontAwesomeIcon style={{ color: ' #00acee' }} icon={faTwitterSquare} /> Twitter</span>\r\n                        <input style={{ border: inputErrors.twitter ? '2px solid red' : '2px solid #e7e7e7' }} value={input.twitter} maxLength='255' name='twitter' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\r\n                        {inputErrors.twitter && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                    </div>\r\n                    <div className='displayFlexColumn' id='alignItemsFS'>\r\n                        <span className='font800'><FontAwesomeIcon style={{ color: '#0e76a8' }} icon={faLinkedin} /> LinkedIn</span>\r\n                        <input style={{ border: inputErrors.linkedIn ? '2px solid red' : '2px solid #e7e7e7' }} value={input.linkedIn} maxLength='255' name='linkedIn' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\r\n                        {inputErrors.linkedIn && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                    </div>\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>One-line description *</span>\r\n                    <span className='advert'>Describe your project in just a few words.</span>\r\n                    <input value={input.oneLineDescription} maxLength=\"100\" onChange={(e) => handleInputChange(e)} name='oneLineDescription' className={style.input} />\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Describe your project *</span>\r\n                    <textarea value={input.description} onChange={(e) => handleInputChange(e)} name='description' maxLength=\"2000\" className={style.textarea} />\r\n                </div>\r\n                <div>\r\n                    {input.users && input.users.map(user => !user.userXprojects.isFounder ? <UserCard key={user.id} user={user} projectID={input.id} /> : null)}\r\n                </div>\r\n                {error && <Alert id={style.alert} color=\"danger\">Please complete all the necessary fields.</Alert>}\r\n                {loading && !error ? <img alt=\"Loading GIF\" id={style.loading} src={Loading} /> :\r\n                    <div id={style.btnDiv}>\r\n                        <button disabled={btnDisabled} onClick={handleSubmit} id={style.uploadBtn}>Update your project</button>\r\n                        <Confirmation project={input} />\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userInfo\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setUserInfo: username => dispatch(setUserInfo(username))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectSettings);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\ProjectProfile\\ProjectProfile.jsx",["226"],"import React, { useEffect, useState } from 'react';\r\nimport style from './ProjectProfile.module.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport JobCard from '../JobListing/JobCardProfile';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle, faRocket, faGlobe } from '@fortawesome/free-solid-svg-icons';\r\nimport { faProductHunt, faTwitterSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction ProjectProfile({ projectID }) {\r\n\r\n    const [project, setProject] = useState({});\r\n    const [hasUpvoted, setHasUpvoted] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const BlueOnGreenTooltip = withStyles({\r\n        tooltip: {\r\n            color: \"white\",\r\n            backgroundColor: \"#181a19\",\r\n            fontFamily: 'Nunito',\r\n            fontSize: '12px'\r\n        },\r\n        arrow: {\r\n            color: \"#181a19\"\r\n        }\r\n    })(Tooltip);\r\n\r\n    useEffect(() => {\r\n        axios.get(`/projects/${projectID}`)\r\n            .then(project => {\r\n                setProject(project.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    function modifyUpvotes() {\r\n        const updatedUpvotes = { upvotes: project.upvotes + 1 };\r\n        axios.patch(`/projects/${project.id}`, updatedUpvotes)\r\n            .then(res => {\r\n                setProject({ ...project, upvotes: project.upvotes + 1 });\r\n                setHasUpvoted(true);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <img alt=\"Loading GIF\" id={style.loading} src={Loading} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='displayFlexColumn'>\r\n            <div style={{ background: project.mainColor }} id={style.cover}></div>\r\n            <div id={style.presentDiv}>\r\n                <div id={style.socialMediaDiv}>\r\n                    {hasUpvoted || project.isDeleted ? <button style={{ display: project.isDeleted ? 'none' : 'inline', background: project.mainColor, color: project.brightness === 'bright' ? '#fff' : '#000' }} id={style.upvoteBtn}><FontAwesomeIcon icon={faCheckCircle} /></button> : <button onClick={modifyUpvotes} style={{ background: project.mainColor, color: project.brightness === 'bright' ? '#fff' : '#000' }} id={style.upvoteBtn}><FontAwesomeIcon icon={faRocket} /> Upvote | {project.upvotes}</button>}\r\n                    {project.productHunt && <a href={project.productHunt} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faProductHunt} /></a>}\r\n                    {project.twitter && <a href={project.twitter} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faTwitterSquare} /></a>}\r\n                    {project.linkedIn && <a href={project.linkedIn} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faLinkedin} /></a>}\r\n                    {project.website && <a href={project.website} target='blank' rel=\"noreferrer\" style={{ textDecoration: 'none', color: project.mainColor }}><FontAwesomeIcon icon={faGlobe} /></a>}\r\n                </div>\r\n                <div id={style.projectLogo}><img alt=\"Project logo\" src={project.logo} id={style.logo} /></div>\r\n                <h1 id={style.projectName}>{project.name} {project.isDeleted && <BlueOnGreenTooltip title='This project has been closed by its founders.' arrow><span id={style.closedSpan}>CLOSED</span></BlueOnGreenTooltip>}</h1>\r\n                <span id={style.oneLineDescription}>{project.oneLineDescription}</span>\r\n            </div>\r\n            <div id={style.aboutDiv} style={{ background: project.mainColor }}>\r\n                <h1 className='font600'>About</h1>\r\n                <p className='font200' style={{ color: project.brightness === 'bright' ? '#fff' : '#000', fontSize: '17px' }}>{project.description}</p>\r\n            </div>\r\n            <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                <h2 className='font800'>Members</h2>\r\n                <div id={style.mainUserDiv}>\r\n                    {project.users && project.users.map(user =>\r\n                        user.userXprojects.endDate === null ?\r\n                            <div key={user.id} style={{ background: user.color, color: user.brightness === 'bright' ? '#fff' : '#000' }} id={style.userDiv}>\r\n                                <img alt=\"Profile\" src={user.profilePic} id={style.profilePic} />\r\n                                <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                                    <h5 className='font800'>@ {user.username}</h5>\r\n                                    <span id={style.lowEnphasis}>{user.userXprojects.role}</span>\r\n                                </div>\r\n                                <Link to={`/user/${user.username}`}>\r\n                                    <button style={{ color: user.brightness === 'bright' ? '#fff' : '#000', border: user.brightness === 'bright' ? '2px solid #fff' : '2px solid #000' }} id={style.contactBtn}>Contact</button>\r\n                                </Link>\r\n                            </div> :\r\n                            null\r\n                    )}\r\n                </div>\r\n            </div>\r\n            {project.jobOpportunities && project.jobOpportunities.length > 0 &&\r\n                <div id={style.mainJobDiv}>\r\n                    <h2 className='font800'>Join {project.name}</h2>\r\n                    {project.jobOpportunities.map(job => <JobCard key={job.id} project={project} job={job} />)}\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ProjectProfile);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\StartupAdminPanel\\JobPanel\\JobPanel.jsx",["227"],"import React, { useLayoutEffect, useState } from 'react';\r\nimport style from './JobPanel.module.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport JobCard from '../../JobListing/JobCardProfile';\r\nimport Empty from '../../../Media/emptyJob.svg';\r\nimport Loading from '../../../Media/Loading.gif';\r\nimport jwt from 'jsonwebtoken';\r\nimport { setUserInfo } from '../../../Actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDoorOpen } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction JobPanel({ projectID, setUserInfo, user }) {\r\n    const [project, setProject] = useState({});\r\n    const [loading, setLoading] = useState (true);\r\n\r\n    async function asyncUseEffect(username, userId) {\r\n        await (setUserInfo(username));\r\n        try {\r\n            const projectData = await axios.get(`/projects/${projectID}`);\r\n            const userFound = await projectData.data.users.find(member => member.id === userId);\r\n            if (!userFound || userFound.userXprojects.isFounder === false || projectData.data.isDeleted) window.location.replace('/error');\r\n            setProject(projectData.data);\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 1000)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n        if (user) {\r\n            asyncUseEffect(user.username, user.id);\r\n        } else window.location.replace ('/error');\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return (\r\n            <img alt=\"Loading GIF\" src={Loading} id={style.loading} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='displayFlex'>\r\n            <div id={style.fixedDiv}>\r\n                <div id={style.logoDiv}>\r\n                    <Link to={`/project/profile/${projectID}`}><img alt=\"Project logo\" src={project.logo} id={style.invertedLogo} /></Link>\r\n                </div>\r\n                <Link id={style.link} to={`/admin/panel`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Back to Admin Panel</span></Link>\r\n            </div>\r\n            {project.jobOpportunities && project.jobOpportunities.length > 0 ?\r\n                <div id={style.secondDiv}>\r\n                    <h1 className='font800'>Job Panel</h1>\r\n                    <div id={style.jobDiv}>\r\n                        {project.jobOpportunities && project.jobOpportunities.map(job => <JobCard key={job.id} isJobPanel={true} project={project} job={job} />)}\r\n                    </div>\r\n                    <Link className='links' to={`/project/addJob/${projectID}`}><span id={style.addBtn}>Post a job</span></Link>\r\n                </div> :\r\n                <div id={style.emptyDiv}>\r\n                    <img alt=\"No jobs posted\" src={Empty} id={style.empty} />\r\n                    <div id={style.innerEmptyDiv}>\r\n                        <h1 style={{ marginBottom: '25px' }} className='font800'>No jobs posted.</h1>\r\n                        <Link className='links' to={`/project/addJob/${projectID}`}><span id={style.addBtn2}>Post a job</span></Link>\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        user: state.userInfo\r\n    }\r\n} \r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {\r\n        setUserInfo: username => dispatch(setUserInfo(username))\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps)(JobPanel);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\PostStartup\\PostStartup.jsx",["228","229","230"],"import React, { useState, useLayoutEffect } from 'react';\r\nimport Logo from '../../Media/invertedlogo.png';\r\nimport style from './PostStartup.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { BlockPicker } from 'react-color';\r\nimport { getBrightness } from '../../utils';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport { setUserInfo } from '../../Actions/index';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Alert } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCloudUploadAlt, faDoorOpen } from '@fortawesome/free-solid-svg-icons';\r\nimport { faProductHunt, faTwitterSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction PostStartup({ user, limitOfPosts, setUserInfo }) {\r\n    const [input, setInput] = useState({ mainColor: '#000' });\r\n    const [preview, setPreview] = useState('https://i.ibb.co/m82SNJT/profile-pic-startup-sin-marco.png');\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [firstCheck, setFirstCheck] = useState(true);\r\n    const [inputErrors, setInputErrors] = useState({});\r\n    const [btnDisabled, setDisabled] = useState(false);\r\n\r\n    async function asyncUseEffect(username) {\r\n        await (setUserInfo(username));\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        if (!user.username) {\r\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n            if (user) {\r\n                asyncUseEffect(user.username);\r\n            } else window.location.replace('/error');\r\n        }\r\n        if (limitOfPosts) window.location.replace('/error');\r\n        setTimeout(() => {\r\n            setFirstCheck(false);\r\n        }, 2000)\r\n    }, [limitOfPosts])\r\n\r\n    function handleInputChange(e) {\r\n        var copyOfErrors = inputErrors;\r\n        var noErrors = true;\r\n\r\n        if (e.hex) return setInput({ ...input, mainColor: e.hex });\r\n\r\n        if (e.target.name === 'website' || e.target.name === 'workZone' || e.target.name === 'productHunt' || e.target.name === 'twitter' || e.target.name === 'linkedIn') {\r\n            if (!/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(e.target.value)) copyOfErrors = { ...copyOfErrors, [e.target.name]: true };\r\n            else copyOfErrors = { ...copyOfErrors, [e.target.name]: false }\r\n        }\r\n\r\n        for (const key in copyOfErrors) if (copyOfErrors[key]) noErrors = false;\r\n\r\n        if (noErrors) setDisabled(false);\r\n        else setDisabled(true);\r\n\r\n        setInputErrors(copyOfErrors);\r\n\r\n        setInput({\r\n            ...input,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function handleSubmit() {\r\n        setLoading(true);\r\n        if (input.name === '') {\r\n            setError(true);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        if (!file) input.logo = 'https://i.ibb.co/m82SNJT/profile-pic-startup-sin-marco.png';\r\n        input.isPremium = user.isPremium;\r\n        input.ownerId = user.id;\r\n        input.brightness = getBrightness(input.mainColor);\r\n        axios.post(`/projects/${user.username}`, input)\r\n            .then(res => {\r\n                if (file) {\r\n                    const newForm = new FormData();\r\n                    newForm.append('image', file);\r\n                    const config = {\r\n                        headers: {\r\n                            'content-type': 'multipart/form-data'\r\n                        }\r\n                    };\r\n                    return axios.post(`/projects/${res.data.id}/logo`, newForm, config);\r\n                } else window.location.replace('/admin/panel')\r\n            })\r\n            .then(res => window.location.replace('/admin/panel'))\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n            })\r\n    }\r\n\r\n    function check(e) {\r\n        setFile(e.target.files[0]);\r\n        setPreview(URL.createObjectURL(e.target.files[0]));\r\n    }\r\n\r\n    if (firstCheck) {\r\n        return (\r\n            <img alt=\"Loading GIF\" id={style.firstCheck} src={Loading} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='displayFlex'>\r\n            <div id={style.fixedDiv}>\r\n                <div id={style.logoDiv}>\r\n                    <Link to={`/user/${user.username}`}><img alt=\"Project logo\" src={Logo} id={style.invertedLogo} /></Link>\r\n                </div>\r\n                <Link id={style.link} to={`/admin/panel`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Back to Admin Panel</span></Link>\r\n            </div>\r\n            <div id={style.secondDiv}>\r\n                <h1 className='font800'>Let's start.</h1>\r\n                <p className='font200'>\r\n                    Provide the necessary information for developers to fully understand what your project is about. <br />\r\n                    Remember, the more details you provide, the more users will be interested in what you are doing. <br />\r\n                    Don't worry, you can always edit this later! <br />\r\n                </p>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Project name *</span>\r\n                    <input maxLength='100' onChange={(e) => handleInputChange(e)} name='name' className={style.input} />\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Logo *</span>\r\n                    <div id={style.profilePicDiv}>\r\n                        <div id={style.profilePic}><img alt=\"Selected project logo\" src={preview} ID={style.logo} /></div>\r\n                        <label for={style.fileDrop} id={style.logoLabel}>\r\n                            <FontAwesomeIcon icon={faCloudUploadAlt} /> Upload Logo\r\n                        </label>\r\n                        <input onChange={(e) => check(e)} id={style.fileDrop} type='file' />\r\n                    </div>\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span style={{ marginBottom: '25px' }} className='font600'>Main color *</span>\r\n                    <BlockPicker onChange={(e) => handleInputChange(e)} color={input.mainColor} triangle={'hide'} />\r\n                </div>\r\n                <div style={{ marginTop: '25px' }} className='displayFlexColumn'>\r\n                    <span className='font600'>Website</span>\r\n                    <input style={{ border: inputErrors.website ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' onChange={(e) => handleInputChange(e)} name='website' className={style.input} />\r\n                    {inputErrors.website && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>Work Zone *</span>\r\n                    <span className='advert'>Keep in mind that it will be your team's designated workspace. It can be a link to Slack,<br /> Flowdock or WebEx, for example.</span>\r\n                    <input style={{ border: inputErrors.workZone ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' onChange={(e) => handleInputChange(e)} value={input.workZone} name='workZone' className={style.input} />\r\n                    {inputErrors.workZone && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                </div>\r\n                <div id={style.socialDiv}>\r\n                    <div className='displayFlexColumn' id='alignItemsFS'>\r\n                        <span className='font800'><FontAwesomeIcon style={{ color: '#DA552F' }} icon={faProductHunt} /> Product Hunt</span>\r\n                        <input style={{ border: inputErrors.productHunt ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' name='productHunt' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\r\n                        {inputErrors.productHunt && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                    </div>\r\n                    <div className='displayFlexColumn' id='alignItemsFS'>\r\n                        <span className='font800'><FontAwesomeIcon style={{ color: ' #00acee' }} icon={faTwitterSquare} /> Twitter</span>\r\n                        <input style={{ border: inputErrors.twitter ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' name='twitter' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\r\n                        {inputErrors.twitter && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                    </div>\r\n                    <div className='displayFlexColumn' id='alignItemsFS'>\r\n                        <span className='font800'><FontAwesomeIcon style={{ color: '#0e76a8' }} icon={faLinkedin} /> LinkedIn</span>\r\n                        <input style={{ border: inputErrors.linkedIn ? '2px solid red' : '2px solid #e7e7e7' }} maxLength='255' name='linkedIn' onChange={(e) => handleInputChange(e)} className={style.socialMediaInput} />\r\n                        {inputErrors.linkedIn && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                    </div>\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600'>One-line description *</span>\r\n                    <span className='advert'>Describe your project in just a few words.</span>\r\n                    <input maxLength=\"100\" onChange={(e) => handleInputChange(e)} name='oneLineDescription' className={style.input} />\r\n                </div>\r\n                <div className='displayFlexColumn'>\r\n                    <span className='font600' >Describe your project *</span>\r\n                    <textarea onChange={(e) => handleInputChange(e)} name='description' maxLength=\"2000\" className={style.textarea} />\r\n                </div>\r\n                {error && <Alert id={style.alert} color=\"danger\">Please complete all the necessary fields.</Alert>}\r\n                {loading && !error ? <img alt=\"Loading GIF\" id={style.loading} src={Loading} /> : <button disabled={btnDisabled} onClick={handleSubmit} id={style.uploadBtn}>Post your project!</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userInfo,\r\n        limitOfPosts: state.limitOfPosts\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setUserInfo: username => dispatch(setUserInfo(username))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostStartup);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\WorkersList\\WorkersList.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobListing\\JobListings.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\AddJob\\AddJob.jsx",["231","232"],"import React, { useState, useLayoutEffect } from 'react';\r\nimport style from './AddJob.module.css';\r\nimport axios from 'axios';\r\nimport { Hint } from 'react-autocomplete-hint';\r\nimport { connect } from 'react-redux';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport jwt from 'jsonwebtoken';\r\nimport { setUserInfo } from '../../Actions/index';\r\nimport { Link } from 'react-router-dom';\r\nimport { Alert } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDoorOpen } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction AddJob({ projectID, skills, setUserInfo }) {\r\n\r\n    const [project, setProject] = useState({});\r\n    const [selectedSkills, setSelectedSkills] = useState([]);\r\n    const [input, setInput] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    async function asyncUseEffect(username, userId) {\r\n        await (setUserInfo(username));\r\n        try {\r\n            const projectData = await axios.get(`/projects/${projectID}`);\r\n            const userFound = await projectData.data.users.find(member => member.id === userId);\r\n            if (!userFound || userFound.userXprojects.isFounder === false || projectData.data.isDeleted) window.location.replace('/error');\r\n            setProject(projectData.data);\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 1000)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n        if (user) {\r\n            asyncUseEffect(user.username, user.id);\r\n        } else window.location.replace('/error');\r\n    }, [])\r\n\r\n    function removeSkill(e) {\r\n        setSelectedSkills(selectedSkills.filter(skill => skill.label !== e.target.name))\r\n    }\r\n\r\n    function addSkill(e) {\r\n        if (e.keyCode === 13) {\r\n            var found = skills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\r\n            var found2 = selectedSkills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\r\n            if (found && !found2) {\r\n                setSelectedSkills(selectedSkills.concat(found));\r\n                e.target.value = '';\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleInputChange(e) {\r\n        setInput({\r\n            ...input,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function handleDescriptionChange(e) {\r\n        setInput({\r\n            ...input,\r\n            description: e.target.getContent()\r\n        })\r\n    }\r\n\r\n    function handleSubmit() {\r\n        setLoading(true);\r\n        const justIDs = selectedSkills.map(skill => skill.id);\r\n\r\n        if (!input.title || !input.description) return setError('Please complete all the necessary fields.')\r\n\r\n        axios.post(`/jobs/${project.id}`, { jobInfo: input, skills: justIDs })\r\n            .then(res => window.location.replace(`/project/jobPanel/${project.id}`))\r\n            .catch(err => {\r\n                setError('Something failed—we are sorry!');\r\n                setLoading (false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id={style.fixedDiv}>\r\n                <div id={style.logoDiv}>\r\n                    <Link to={`/project/profile/${projectID}`}><img alt=\"Project logo\" src={project.logo} id={style.logo} /></Link>\r\n                </div>\r\n                <Link id={style.link} to={`/project/jobPanel/${projectID}`}><span className='font200'><FontAwesomeIcon icon={faDoorOpen} /> Go back</span></Link>\r\n            </div>\r\n            <div id={style.secondDiv}>\r\n                {!loading ?\r\n                    <div id={style.innerDiv}>\r\n                        <h1 id={style.mainSpan} className='font800'>Post a job</h1>\r\n                        <div className='displayFlexColumn'>\r\n                            <span className='font600'>Title *</span>\r\n                            <input maxLength='255' name='title' onChange={(e) => handleInputChange(e)} className={style.input} />\r\n                        </div>\r\n                        <div className='displayFlexColumn'>\r\n                            <span className={style.title}>Description *</span>\r\n                            {window.innerWidth > 385 && <Editor\r\n                                onChange={(e) => handleDescriptionChange(e)}\r\n                                apiKey='5ltasngibqdlae7csndk86vmlye4eqd8jhk6fsiza0lpz5db'\r\n                                init={{\r\n                                    selector: 'textarea',\r\n                                    content_style:\r\n                                        \"@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800;900&display=swap'); body { font-family: 'Nunito';}\",\r\n                                    branding: false,\r\n                                    height: 300,\r\n                                    width: 723,\r\n                                    menubar: false,\r\n                                    plugins: [\r\n                                        'advlist autolink lists link image',\r\n                                        'charmap print preview anchor help',\r\n                                        'searchreplace visualblocks code',\r\n                                        'insertdatetime media table paste wordcount',\r\n                                    ],\r\n                                    toolbar:\r\n                                        'undo redo | formatselect | bold italic | \\\r\n                            alignleft aligncenter alignright | \\\r\n                            bullist numlist outdent indent'\r\n                                }}\r\n                            />}\r\n                            <textarea id={style.textarea} placeholder='Describe your project'></textarea>\r\n                        </div>\r\n                        <div id={style.skillDiv}>\r\n                            <span className='font600'>Skills</span>\r\n                            <div id={style.selectedSkills}>\r\n                                {selectedSkills.map(skill =>\r\n                                    <div key={skill.id}>\r\n                                        <button style={{ background: skill.strongColor, color: skill.softColor }} name={skill.label} onClick={(e) => removeSkill(e)} id={style.skillBtn}>{skill.label}</button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <Hint options={skills}>\r\n                                <input onKeyDown={(e) => addSkill(e)} className={style.inputSkill} placeholder='Press enter to add a skill' />\r\n                            </Hint>\r\n                            <span className='advert'>If you don't find your skill, please contact us.</span>\r\n                        </div>\r\n                        <div>\r\n                            <button onClick={handleSubmit} id={style.uploadBtn}>Post job</button>\r\n                            {error &&\r\n                                <Alert id={style.alert} color=\"danger\">\r\n                                    {error}\r\n                                </Alert>\r\n                            }\r\n                        </div>\r\n                    </div> :\r\n                    <img alt=\"Loading GIF\" className={style.loading} src={Loading} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        skills: state.allSkills,\r\n        user: state.userInfo\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setUserInfo: username => dispatch(setUserInfo(username))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddJob);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobInfo\\JobInfo.jsx",["233"],"import React, { useState, useLayoutEffect } from 'react';\r\nimport style from './JobInfo.module.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport Register from '../../Components/PopUps/RegisterPopUp';\r\nimport jwt from 'jsonwebtoken';\r\nimport { setUserInfo } from '../../Actions/index'; \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction JobInfo({ jobID, user, setUserInfo }) {\r\n    const [job, setJob] = useState({});\r\n    const [applied, setApplied] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [isMember, setIsMember] = useState(false);\r\n    const [notUser, setNotUser] = useState(false);\r\n\r\n    async function asyncUseEffect(username) {\r\n        await (setUserInfo(username));\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        if (!user.username) {\r\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n            if (user) {\r\n                asyncUseEffect(user.username);\r\n            } else setNotUser (true)\r\n        }\r\n        axios.get(`/jobs/${jobID}/jobInfo`)\r\n            .then(jobInfo => {\r\n                setJob(jobInfo.data);\r\n                const found = jobInfo.data.Applicants.find(applicant => applicant.id === user.id);\r\n                const findMember = jobInfo.data.project.users.find(member => member.id === user.id && member.userXprojects.endDate === null);\r\n                if (findMember) {\r\n                    setIsMember(true);\r\n                } else if (found && found.username) setApplied(true)\r\n                setLoading(false);\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [user])\r\n\r\n    function applyToJob() {\r\n        axios.post(`/jobs/${jobID}/applicants`, { username: user.username })\r\n            .then(res => setApplied(true))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!loading ?\r\n                <div>\r\n                    {job.project &&\r\n                        <div style={{ background: job.project && job.project.mainColor, color: job.project.brightness === 'bright' ? '#fff' : '#000' }} id={style.mainDiv}>\r\n                            <Link style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', textDecoration: 'none' }} to='/jobs'><span id={style.goBack}><FontAwesomeIcon style={{ marginRight: '10px' }} icon={faArrowLeft} />More jobs</span></Link>\r\n                            <Link className='links' to={`/project/profile/${job.project.id}`}>\r\n                                <div className='displayFlex' id='alignItemsCenter'>\r\n                                    <div id={style.projectLogoDiv}>\r\n                                        <img alt=\"Project logo\" src={job.project.logo} id={style.logo} />\r\n                                    </div>\r\n                                    <h5 style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', margin: '0px' }} className='font800'>{job.project.name}</h5>\r\n                                </div>\r\n                            </Link>\r\n                            <h1 id={style.jobTitle}>{job.title}</h1>\r\n                            <div id={style.btnDiv}>\r\n                                {notUser ? <Register isJobProfile={true} /> :\r\n                                    isMember ? <span style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', background: job.project.brightness === 'bright' ? '#000' : '#fff' }} id={style.applied}><FontAwesomeIcon id={style.appliedIcon} icon={faCheckCircle} /> You are already part of {job.project.name}.</span> :\r\n                                        applied ?\r\n                                            <span style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', background: job.project.brightness === 'bright' ? '#000' : '#fff' }} id={style.applied}><FontAwesomeIcon id={style.appliedIcon} icon={faCheckCircle} /> You have applied to this job</span> :\r\n                                            <button onClick={applyToJob} style={{ color: job.project.brightness === 'bright' ? '#fff' : '#000', border: job.project.brightness === 'bright' ? '4px solid #fff' : '4px solid #000' }} id={style.applyBtn}>Apply to this job</button>\r\n                                }\r\n                                {job.Applicants.length >= 15 && !applied && <span className='font200'>🔥 This job has received many applications</span>}\r\n                            </div>\r\n                        </div>}\r\n                    <div>\r\n                        <div dangerouslySetInnerHTML={{ __html: job.description }} id={style.jobDescrip}></div>\r\n                    </div>\r\n                </div> :\r\n                <img alt=\"Loading GIF\" id={style.loading} src={Loading} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userInfo\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {\r\n        setUserInfo: username => dispatch(setUserInfo(username))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JobInfo);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\Suggestions\\Suggestions.jsx",["234"],"import React, { useState, useLayoutEffect } from 'react';\r\nimport style from '../WorkersList/WorkersList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport UserCardSearch from '../../Components/UserCard/UserCardSearch';\r\nimport ProjectCard from '../../Components/UserCard/ProjectCard';\r\nimport { findSuggestions } from '../../utils';\r\nimport Empty from '../../Media/NotFoundSearch.svg';\r\nimport Cover from '../../Media/searchCover.jpg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Suggestions({ pathname, users, projects }) {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [suggestions, setSuggestions] = useState({});\r\n\r\n    useLayoutEffect(() => {\r\n        const allProjectsAndUsers = projects.concat(users);\r\n        setSuggestions(findSuggestions(allProjectsAndUsers, pathname.search));\r\n        setTimeout(() => {\r\n            setLoading (false);\r\n        }, 2000)\r\n    }, [users])\r\n\r\n\r\n    function search(e) {\r\n        setLoading(true);\r\n        if (e.keyCode === 13) {\r\n            const allProjectsAndUsers = projects.concat(users);\r\n            setSuggestions(findSuggestions(allProjectsAndUsers, `?${e.target.value}`));\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id={style.mainImage} style={{ backgroundImage: `url(${Cover})`}}>\r\n                <div id={style.searchDiv}>\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                    <input onKeyDown={(e) => search(e)} placeholder='Search for projects or users' id={style.searchInput} />\r\n                </div>\r\n            </div>\r\n            {loading ? <img alt=\"Loading GIF\" id={style.suggestionsLoading} src={Loading} /> :\r\n                <div>\r\n                    {suggestions.projects.length > 0 && <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                        <div className='displayFlex' id='alignItemsCenter'>\r\n                            <h1 className='font800'>Projects ({suggestions.projects.length})</h1>\r\n                        </div>\r\n                        <div id={style.userCards}>\r\n                            {suggestions.projects.map(project => <ProjectCard key={project.id} project={project} />)}\r\n                        </div>\r\n                    </div>}\r\n                    {suggestions.users.length > 0 && <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                        <div className='displayFlex' id='alignItemsCenter'>\r\n                            <h1 className='font800'>Developers ({suggestions.users.length})</h1>\r\n                        </div>\r\n                        <div id={style.userCards}>\r\n                            {suggestions.users.map(user => <UserCardSearch key={user.id} user={user} />)}\r\n                        </div>\r\n                    </div>}\r\n                    {suggestions.projects.length === 0 && suggestions.users.length === 0 &&\r\n                        <div className='justifyCenter' id='alignItemsCenter'>\r\n                            <img alt=\"No suggestions found\" src={Empty} id={style.empty} />\r\n                            <div>\r\n                                <h1 style={{ marginBottom: '25px' }} className='font800'>Oops... nothing was found.</h1>\r\n                            </div>\r\n                        </div>}\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        users: state.users,\r\n        projects: state.projects\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Suggestions);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\SuccessPage\\SuccessPage.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\NotFound\\NotFound.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\EditUser\\EditUser.jsx",["235","236","237","238","239"],"import React, { useLayoutEffect, useState } from 'react';\r\nimport style from './EditUser.module.css';\r\nimport { connect } from 'react-redux';\r\nimport Verified from '../../Media/Verification.png';\r\nimport GoPremium from '../../Components/GoPremiumPopUp/GoPremium';\r\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\r\nimport { Hint } from 'react-autocomplete-hint';\r\nimport Loading from '../../Media/Loading.gif';\r\nimport { BlockPicker } from 'react-color';\r\nimport axios from 'axios';\r\nimport { getBrightness } from '../../utils';\r\nimport jwt from 'jsonwebtoken';\r\nimport { setUserInfo } from '../../Actions/index';\r\nimport { Alert } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPortrait, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { faGithubSquare, faLinkedin, faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction EditUser({ user, skills, setUserInfo }) {\r\n\r\n    const [input, setInput] = useState({\r\n        email: user.email,\r\n        color: user.color,\r\n        gitHub: user.gitHub,\r\n        linkedIn: user.linkedIn,\r\n        twitter: user.twitter,\r\n        description: user.description,\r\n        country: user.country,\r\n        region: user.region\r\n    });\r\n    const [preview, setPreview] = useState(user.profilePic);\r\n    const [selectedSkills, setSelectedSkills] = useState();\r\n    const [errors, setErrors] = useState({});\r\n    const [file, setFile] = useState(null);\r\n    const [btnDisabled, setDisabled] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    async function asyncUseEffect(username) {\r\n        await (setUserInfo(username));\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        if (!user.username) {\r\n            const user = jwt.decode(JSON.parse(localStorage.getItem('user')))\r\n            if (user) {\r\n                asyncUseEffect(user.username);\r\n            } else window.location.replace('/error');\r\n        }\r\n        setPreview(user.profilePic);\r\n        setInput({\r\n            email: user.email,\r\n            color: user.color,\r\n            gitHub: user.gitHub,\r\n            linkedIn: user.linkedIn,\r\n            twitter: user.twitter,\r\n            description: user.description,\r\n            country: user.country,\r\n            region: user.region\r\n        })\r\n        setSelectedSkills(user.skills);\r\n        setLoading(false)\r\n    }, [user])\r\n\r\n    function check(e) {\r\n        setFile(e.target.files[0]);\r\n        setPreview(URL.createObjectURL(e.target.files[0]));\r\n    }\r\n\r\n    function addSkill(e) {\r\n        if (e.keyCode === 13) {\r\n            var found = skills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\r\n            var found2 = selectedSkills.find(skill => skill.label.toLowerCase() === e.target.value.toLowerCase());\r\n            if (found && !found2) {\r\n                setSelectedSkills(selectedSkills.concat(found));\r\n                e.target.value = '';\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeSkill(e) {\r\n        setSelectedSkills(selectedSkills.filter(skill => skill.label !== e.target.name))\r\n    }\r\n\r\n    function handleInputChange(e) {\r\n        var copyOfErrors = errors;\r\n        var noErrors = true;\r\n        if (e.hex) return setInput({ ...input, color: e.hex });\r\n        if (e.target.name === 'email') {\r\n            if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g.test(e.target.value)) copyOfErrors = { ...copyOfErrors, email: true };\r\n            else copyOfErrors = { ...copyOfErrors, email: false };\r\n        }\r\n        if (e.target.name === 'gitHub' || e.target.name === 'linkedIn' || e.target.name === 'twitter') {\r\n            if (!/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(e.target.value)) copyOfErrors = { ...copyOfErrors, [e.target.name]: true };\r\n            else copyOfErrors = { ...errors, [e.target.name]: false };\r\n        }\r\n\r\n        for (const key in copyOfErrors) if (copyOfErrors[key]) noErrors = false;\r\n\r\n        if (noErrors) setDisabled(false);\r\n        else setDisabled(true);\r\n\r\n        setErrors(copyOfErrors);\r\n\r\n        setInput({ ...input, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    function handleSubmit() {\r\n        setLoading(true);\r\n        input.brightness = getBrightness(input.color);\r\n        const filteredSkills = selectedSkills.map(skill => skill.id);\r\n        input.skills = filteredSkills;\r\n        axios.put(`/users/${user.id}`, input)\r\n            .then(res => {\r\n                if (file) {\r\n                    const newForm = new FormData();\r\n                    newForm.append('image', file);\r\n                    const config = {\r\n                        headers: {\r\n                            'content-type': 'multipart/form-data'\r\n                        }\r\n                    };\r\n                    return axios.post(`/users/${user.id}/profilePic`, newForm, config);\r\n                } else {\r\n                    window.location.replace(`/user/${user.username}`)\r\n                }\r\n            })\r\n            .then(res => window.location.replace(`/user/${user.username}`))\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className='displayFlexColumn' id='alignItemsCenter'>\r\n            <div style={{ background: user.color }} id={style.mainImage}>\r\n                <h1 style={{ color: user.brightness === 'bright' ? '#fff' : '#000' }} className='font800'>Edit your profile</h1>\r\n            </div>\r\n            <div id={style.container}>\r\n                {!loading && <div id={style.form}>\r\n                    <div className='displayFlex' id='alignItemsCenter'>\r\n                        <h2 className='font800'>@{user.username}</h2>\r\n                        {user.isPremium && <img alt=\"Verification badge\" id={style.verification} src={Verified} />}\r\n                    </div>\r\n                    <div style={{ display: user.isPremium ? 'none' : 'flex' }} id={style.GPdiv}>\r\n                        <span className='font800'>Verify your FindDevs account and access all the benefits!</span>\r\n                        <GoPremium />\r\n                    </div>\r\n                    <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                        <div id={style.firstDiv} className='displayFlex'>\r\n                            <div id={style.imageDiv}>\r\n                                <div style={{ backgroundImage: `url(${preview})` }} id={style.profilePic}></div>\r\n                                <label for={style.fileDrop} id={style.logoLabel}><FontAwesomeIcon icon={faPortrait} /> Upload Image</label>\r\n                                <input onChange={(e) => check(e)} id={style.fileDrop} type='file' />\r\n                                <BlockPicker onChange={(e) => handleInputChange(e)} color={input.color} />\r\n                            </div>\r\n                            <div id={style.innerFirstDiv}>\r\n                                <div className={style.inputDiv}>\r\n                                    <span className='font800'>Your email</span>\r\n                                    <span id={style.lowEnphasis}>Keep in mind that it will be the one through which startups will contact you.</span>\r\n                                    <input name='email' style={{ border: errors.email ? '2px solid red' : '2px solid #e7e7e7' }} value={input.email} onChange={(e) => handleInputChange(e)} className={style.biggerInput}></input>\r\n                                    {errors.email && <span className={style.errors}>Please enter a valid email.</span>}\r\n                                </div>\r\n                                <div>\r\n                                    <span className='font800'>Where are you based?</span>\r\n                                    <div>\r\n                                        <CountryDropdown className={style.dropdown} value={input.country} onChange={(val) => setInput({ ...input, country: val })} />\r\n                                        <RegionDropdown className={style.dropdown} country={input.country} value={input.region} onChange={(val) => setInput({ ...input, region: val })} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className={style.inputDiv}>\r\n                                    <span className='font800'>Your bio</span>\r\n                                    <textarea name='description' value={input.description} onChange={(e) => handleInputChange(e)} maxLength='255' className={style.textarea}></textarea>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <h3 className='font800' id='giveMargin'>Social profiles</h3>\r\n                        <div id={style.socialDiv}>\r\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                                <span className='font800'><FontAwesomeIcon icon={faGithubSquare} /> GitHub</span>\r\n                                <input style={{ border: errors.gitHub ? '2px solid red' : '2px solid #e7e7e7' }} value={input.gitHub} name='gitHub' onChange={(e) => handleInputChange(e)} className={style.input} />\r\n                                {errors.gitHub && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                            </div>\r\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                                <span className='font800'><FontAwesomeIcon style={{ color: '#0e76a8' }} icon={faLinkedin} /> LinkedIn</span>\r\n                                <input style={{ border: errors.linkedIn ? '2px solid red' : '2px solid #e7e7e7' }} value={input.linkedIn} name='linkedIn' onChange={(e) => handleInputChange(e)} className={style.input} />\r\n                                {errors.linkedIn && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                            </div>\r\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                                <span className='font800'><FontAwesomeIcon style={{ color: ' #00acee' }} icon={faTwitterSquare} /> Twitter</span>\r\n                                <input style={{ border: errors.twitter ? '2px solid red' : '2px solid #e7e7e7' }} value={input.twitter} name='twitter' onChange={(e) => handleInputChange(e)} className={style.input} />\r\n                                {errors.twitter && <span className={style.errors}>Please enter a valid URL.</span>}\r\n                            </div>\r\n                        </div>\r\n                        <h3 className='font800' id='giveLessMargin'>Your skills</h3>\r\n                        <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                            <div id={style.skillDiv} className='displayFlex'>\r\n                                {selectedSkills && selectedSkills.map(skill =>\r\n                                    <div key={skill.id}>\r\n                                        <button style={{ background: skill.strongColor, color: skill.softColor }} name={skill.label} onClick={(e) => removeSkill(e)} id={style.skillBtn}><FontAwesomeIcon icon={faTimesCircle} /> {skill.label}</button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <Hint options={skills}>\r\n                                <input onKeyDown={(e) => addSkill(e)} style={{ margin: '0px' }} className={style.input} placeholder='Press enter to add a skill' />\r\n                            </Hint>\r\n                        </div>\r\n                    </div>\r\n                    <div id={style.btnDiv}>\r\n                        <button onClick={() => window.location.replace(`/user/${user.username}`)} style={{ background: 'black', color: 'white' }} id={style.btn}>Discard changes</button>\r\n                        <button onClick={handleSubmit} disabled={btnDisabled} style={{ background: btnDisabled ? 'gray' : user.color, color: user.brightness === 'bright' ? '#fff' : '#000' }} id={style.btn}>Save changes</button>\r\n                    </div>\r\n                    {error && <Alert id='giveMargin' className='font800' color=\"danger\">\r\n                        Something failed — we are sorry!\r\n                    </Alert>}\r\n                </div>}\r\n                {loading &&\r\n                    <div id={style.form}>\r\n                        <img alt=\"Loading GIF\" src={Loading} />\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.userInfo,\r\n        skills: state.allSkills\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setUserInfo: username => setUserInfo(username)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditUser);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\TermsAndConditions\\Privacy.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\utils.js",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HeaderUser\\SearchBar.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\PopUps\\RegisterPopUp.jsx",["240","241"],"import React, { useState } from 'react';\r\nimport style from './PopUpStyle.module.css';\r\nimport Popup from 'reactjs-popup';\r\nimport axios from 'axios';\r\nimport randomColor from 'randomcolor';\r\nimport { Link } from 'react-router-dom';\r\nimport { getBrightness } from '../../utils';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction RegisterPopUp({ isHomepage, isMain, isMainHomepage, isJobProfile }) {\r\n\r\n    const [input, setInput] = useState({});\r\n    const [showPass, setShowPass] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    function handleInputChange(e) {\r\n        if (e.target.name === 'email') {\r\n            if (!(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g.test(e.target.value))) {\r\n                setErrors({ ...errors, email: 'Please enter a valid email.' });\r\n                setDisabled(true);\r\n            } else {\r\n                setErrors({ ...errors, email: false });\r\n                setDisabled(false);\r\n            }\r\n        }\r\n        if (e.target.name === 'username' && errors.username) {\r\n            setErrors({ ...errors, username: false });\r\n            setDisabled(false);\r\n        }\r\n        setInput({\r\n            ...input,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function handleSubmit() {\r\n        input.color = randomColor();\r\n        input.brightness = getBrightness(input.color);\r\n        input.profilePic = 'https://iupac.org/wp-content/uploads/2018/05/default-avatar.png';\r\n        axios.post('/auth/register', input)\r\n            .then(res => {\r\n                localStorage.setItem('user', JSON.stringify(res.data));\r\n                window.location.replace('/edit/user/me');\r\n            })\r\n            .catch(err => {\r\n                setErrors({ ...errors, username: 'Username already taken', email: 'A user with this email already exists.' });\r\n                setDisabled(true);\r\n            })\r\n    }\r\n\r\n    function closePopUp(close) {\r\n        setErrors({});\r\n        setDisabled(false);\r\n        setInput({});\r\n        close();\r\n    }\r\n\r\n    return (\r\n        <Popup trigger={\r\n            isJobProfile ? <button id={style.applyBtn}>Apply to this job</button> : \r\n            isMain ? <button className={style.btn}>Post your startup.</button> :\r\n                isMainHomepage ? <button id={style.joinBtn}>Join FindDevs for free.</button> :\r\n                    isHomepage ?\r\n                        <span className={style.headerIcon}>Join</span> :\r\n                        <span id={style.nonHomepage}>Join FindDevs</span>\r\n        } modal>\r\n            {close => (\r\n                <div>\r\n                    <div id={style.mainDiv}>\r\n                        <div id={style.form}>\r\n                            <button id={style.closeBtn} onClick={() => closePopUp(close)}><FontAwesomeIcon icon={faTimes} /></button>\r\n                            <h1 id={style.title}>Sign Up</h1>\r\n                            <span style={{ width: '85%' }}>Join <span className='font800'>FindDevs</span> today and get the boost your startup needs.</span>\r\n                            <div className={errors['username'] ? style.inputcontainerError : style.inputcontainer}>\r\n                                <input value={input.fullName} name='username' className={style.input} placeholder='Your username' onChange={(e) => handleInputChange(e)}></input>\r\n                            </div>\r\n                            {errors['username'] && <span id={style.alertSpan}>{errors['username']}</span>}\r\n                            <div className={errors['email'] ? style.inputcontainerError : style.inputcontainer}>\r\n                                <input value={input.email} name='email' className={style.input} placeholder='Email' onChange={(e) => handleInputChange(e)}></input>\r\n                            </div>\r\n                            {errors['email'] && <span id={style.alertSpan}>{errors['email']}</span>}\r\n                            <div className={errors['email'] ? style.inputcontainerError : style.inputcontainer} className={style.inputcontainer}>\r\n                                <input value={input.password} name='password' type={showPass ? 'text' : 'password'} className={style.input} placeholder='Password' onChange={(e) => handleInputChange(e)}></input>\r\n                                <button id={style.showPassBtn} onClick={() => setShowPass(!showPass)}>{showPass ? 'Hide' : 'Show'}</button>\r\n                            </div>\r\n                            {errors['password'] && <span id={style.alertSpan}>{errors['password']}</span>}\r\n                            <button disabled={!input.username || !input.password || !input.email || disabled ? true : false} id={style.createBtn} onClick={() => handleSubmit()} >Create your account.</button>\r\n                            <span id={style.agreement}>By signing up, I agree to FindDevs <Link id={style.link} to=\"/privacy\">Privacy Policy</Link></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Popup>\r\n    )\r\n}\r\n\r\n\r\nexport default RegisterPopUp","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HirePopUp\\HirePopUp.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ProfileProjectCard\\ProfileProjectCard.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ProjectCard\\ProjectCard.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\GoPremiumPopUp\\GoPremium.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\UserCard\\UserCardSearch.jsx",["242"],"import React, { useEffect, useState } from 'react';\r\nimport style from './UserCard.module.css';\r\nimport Verification from '../../Media/Verification.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    arrow: { color: \"#181a19\" }\r\n}));\r\n\r\nfunction UserCardSearch({ user }) {\r\n    const [extraSkills, setExtraSkills] = useState(null);\r\n    const [ESL, setESL] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (user.skills) {\r\n            const reduced = user.skills.slice(8).reduce((acc, curr, index) => index === user.skills.slice(8).length - 1 ? acc + curr.label : acc + `${curr.label}, `, '');\r\n            setExtraSkills(reduced);\r\n            setESL(user.skills.slice(8).length);\r\n        }\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n    const BlueOnGreenTooltip = withStyles({\r\n        tooltip: {\r\n            color: \"white\",\r\n            backgroundColor: \"#181a19\",\r\n            fontFamily: 'Nunito',\r\n            fontSize: '12px'\r\n        }\r\n    })(Tooltip);\r\n\r\n    return (\r\n        <div id={style.userCard}>\r\n            <div id='alignItemsCenter' className='displayFlexColumn'>\r\n                <img alt=\"Profile\" id={style.profilePic} src={user.profilePic} />\r\n                <div className='displayFlex' id='alignItemsCenter'>\r\n                    <span className='font800'><span style={{ color: user.color }}>@ </span>{user.username}</span>\r\n                    {user.isPremium && <img alt=\"Verification badge\" id={style.verification} src={Verification} />}\r\n                </div>\r\n            </div>\r\n            <p id={style.bio}>{user.description}</p>\r\n            <div className='justifyCenter' style={{ flexWrap: 'wrap' }}>\r\n                {user.skills && user.skills.slice(0, 8).map(skill =>\r\n                    <div key={skill.id} id={style.skillDiv}>\r\n                        <span\r\n                            style={{ background: `${skill.strongColor}`, color: skill.softColor }}\r\n                            id={style.skillSpan}>\r\n                            {skill.user_skills.isValidated && <FontAwesomeIcon style={{ marginRight: '5px' }} icon={faCheckCircle} />}{skill.label}\r\n                        </span>\r\n                    </div>\r\n                )}\r\n                {extraSkills &&\r\n                    <BlueOnGreenTooltip classes={{ arrow: classes.arrow }} id={style.tooltip} title={extraSkills} arrow>\r\n                        <span id={style.plusSearch}>+{ESL}</span>\r\n                    </BlueOnGreenTooltip>}\r\n            </div>\r\n            <Link style={{ width: '100%' }} to={`/user/${user.username}`}><button id={style.btn} style={{ background: user.color }}>Contact</button></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCardSearch;","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\UserCard\\ProjectCard.jsx",["243"],"import React from 'react';\r\nimport style from './UserCard.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Verification from '../../Media/Verification.png';\r\n\r\nfunction ProjectCard({ project }) {\r\n    return (\r\n        <div id={style.projectCard}>\r\n            <div id='alignItemsCenter' className='displayFlexColumn'>\r\n                <img alt=\"Project logo\" id={style.profilePic} src={project.logo} />\r\n                <div className='displayFlex' id='alignItemsCenter'>\r\n                    <span id={style.projectName} className='font800'>{project.name}</span>\r\n                    {project.isPremium && <img src={Verification} id={style.verification} />}\r\n                </div>\r\n                <p id={style.bio}>{project.oneLineDescription}</p>\r\n            </div>\r\n            <Link style={{ width: '100%' }} to={`/project/profile/${project.id}`}><button id={style.btn} style={{ background: project.mainColor }}>Go to profile</button></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectCard;","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobListing\\JobCard.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\UserCard\\UserCard.jsx",["244"],"import React, { useState, useEffect } from 'react';\r\nimport style from './UserCard.module.css';\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Verification from '../../Media/Verification.png';\r\nimport { selectWorkers } from '../../Actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    arrow: { color: \"#181a19\" }\r\n}));\r\n\r\nfunction UserCard({ user, setLoading, selectWorkers, skillSelection }) {\r\n\r\n    const [extraSkills, setExtraSkills] = useState(null);\r\n    const [extraSkillsLength, setExtraLength] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (user.skills) {\r\n            const reduced = user.skills.slice(8).reduce((acc, curr, index) => index === user.skills.slice(8).length - 1 ? acc + curr.label : acc + `${curr.label}, `, '');\r\n            setExtraSkills(reduced);\r\n            setExtraLength(user.skills.slice(8).length);\r\n        }\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n    const BlueOnGreenTooltip = withStyles({\r\n        tooltip: {\r\n            color: \"white\",\r\n            backgroundColor: \"#181a19\",\r\n            fontFamily: 'Nunito',\r\n            fontSize: '12px'\r\n        }\r\n    })(Tooltip);\r\n\r\n    function addSkill (skill) {\r\n        setLoading (true);\r\n        const dontRepeat = skillSelection.find (filtered => filtered.id === skill.id);\r\n        if (!dontRepeat) selectWorkers(skill);\r\n        setLoading (false);\r\n    }\r\n\r\n    return (\r\n        <div id={style.userCard} style={{ height: user.skills ? '650px' : '525px'}}>\r\n            <div className='displayFlexColumn' id='alignItemsCenter'>\r\n                <img alt=\"Profile\" id={style.profilePic} src={user.profilePic} />\r\n                <div id='alignItemsCenter' className='displayFlex'>\r\n                    <span className='font800' style={{ alignSelf: 'flex-start' }}><span style={{ color: user.color }}>@ </span>{user.username}</span>\r\n                    {user.isPremium && <img alt=\"Verification badge\" id={style.verification} src={Verification} />}\r\n                </div>\r\n                <p id={style.bio}>{user.description}</p>\r\n            </div>\r\n            <div id='alignItemsCenter' className='justifyCenter' style={{ flexWrap: 'wrap' }}>\r\n                {user.skills && user.skills.slice(0, 8).map(skill =>\r\n                    <div key={skill.id} id={style.skillDiv}>\r\n                        <BlueOnGreenTooltip classes={{ arrow: classes.arrow }} id={style.tooltip} title='Add tag to filters' arrow>\r\n                            <span\r\n                                onClick={() => { addSkill (skill) }}\r\n                                style={{ background: `${skill.strongColor}`, color: skill.softColor }}\r\n                                id={style.skillSpan}>\r\n                                {skill.user_skills.isValidated && <FontAwesomeIcon style={{ marginRight: '5px' }} icon={faCheckCircle} />}{skill.label}\r\n                            </span>\r\n                        </BlueOnGreenTooltip>\r\n                    </div>\r\n                )}\r\n                {extraSkills &&\r\n                    <BlueOnGreenTooltip classes={{ arrow: classes.arrow }} id={style.tooltip} title={extraSkills} arrow>\r\n                        <span id={style.plus}>+{extraSkillsLength}</span>\r\n                    </BlueOnGreenTooltip>}\r\n            </div>\r\n            <Link id={style.link} to={`/user/${user.username}`}><button id={style.btn} style={{ background: user.color }}>Contact</button></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        skillSelection: state.skillSelection\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        selectWorkers: skill => dispatch(selectWorkers(skill))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserCard);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\JobListing\\JobCardProfile.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Screens\\PostStartup\\UserSettingsCard.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\PopUps\\Confirmation.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\PopUps\\LoginPopUp.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\HirePopUp\\JobCard.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\MembersPopUp.jsx",["245"],"import React, { useEffect, useState } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport style from './ApplicantsPopUp.module.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport ChangeRole from './ChangeRole';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { Alert } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes, faUsers, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction MembersPopUp({ projectID, userInfo, brightness, isFounder }) {\r\n\r\n    const [project, setProject] = useState({});\r\n    const [changeRole, setChangeRole] = useState(false);\r\n    const [copied, setCopied] = useState(false);\r\n    const [fire, setFire] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get(`/projects/${projectID}`)\r\n            .then(projectData => setProject(projectData.data))\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    function copiedFunction() {\r\n        setCopied(true);\r\n        setTimeout(() => {\r\n            setCopied(false);\r\n        }, 3000)\r\n    }\r\n\r\n    function fireUser(userID) {\r\n        axios.delete(`/projects/${projectID}/${userID}/fire`)\r\n            .then(res => window.location.reload())\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Popup trigger={\r\n            <div style={{ color: brightness === 'bright' ? '#fff' : '#000', border: brightness === 'bright' ? '2px solid #fff' : '2px solid #000' }} className={style.redirectDiv}>\r\n                <span><FontAwesomeIcon icon={faUsers} /> Members</span>\r\n            </div>}\r\n            modal>\r\n            {close => (\r\n                <div id={style.mainDiv}>\r\n                    {!changeRole ?\r\n                        <div id={style.memberForm}>\r\n                            <button id={style.closeBtn} onClick={close}><FontAwesomeIcon icon={faTimes} /></button>\r\n                            <h1 className='font200'><span className='font800'>{project.name}</span> members</h1>\r\n                            <div id={style.topApplicantDiv}>\r\n                                {project.users && project.users.map(user =>\r\n                                    user.userXprojects.endDate === null &&\r\n                                    <div key={user.id} id={style.applicantDiv}>\r\n                                        <div id={style.userInfo}>\r\n                                            <div style={{ backgroundImage: `url(${user.profilePic})`}} id={style.profilePic}></div>\r\n                                            <div id={style.memberInfo}>\r\n                                                <span className='font800'>{`@ ${user.username}`}</span>\r\n                                                <span className='font200'>{user.userXprojects.role}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        {user.username !== userInfo.username &&\r\n                                            <div id={style.socialMediaDiv2}>\r\n                                                {isFounder && <button onClick={() => setChangeRole(user)} id={style.btn}>CHANGE ROLE</button>}\r\n                                                <Link to={`/user/${user.username}?verify`}><button id={style.btn}>VALIDATE</button></Link>\r\n                                                <CopyToClipboard text={user.email}><button id={style.btn} onClick={copiedFunction} >CONTACT</button></CopyToClipboard>\r\n                                                {isFounder && <button onClick={() => setFire(user)} id={style.btn}>FIRE</button>}\r\n                                            </div>}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div> :\r\n                        <ChangeRole userData={changeRole} setChangeRole={setChangeRole} projectName={project.name} />}\r\n                    {copied && <Alert id={style.copiedAlert} color=\"success\">Copied user's contact email to clipboard!</Alert>}\r\n                    {fire &&\r\n                        <Alert id={style.copiedAlert} color=\"danger\">\r\n                            Are you sure you want to fire {fire.username}?\r\n                            <button className={style.actionBtn} onClick={() => fireUser(fire.id)}><FontAwesomeIcon icon={faCheckCircle} /></button>\r\n                            <button onClick={() => setFire(false)} className={style.actionBtn}><FontAwesomeIcon icon={faTimesCircle} /></button>\r\n                        </Alert>}\r\n                </div>\r\n            )}\r\n        </Popup>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(state) {\r\n    return {\r\n        userInfo: state.userInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapDispatchToProps, null)(MembersPopUp);","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\ApplicantsPopUp.jsx",["246"],"import React, { useEffect, useState } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport style from './ApplicantsPopUp.module.css';\r\nimport axios from 'axios';\r\nimport ApplicantsList from './ApplicantsList';\r\nimport Accepted from './Accepted';\r\n\r\nfunction ApplicantsPopUp({ job, projectName, brightness, projectLogo }) {\r\n\r\n    const [applicants, setApplicants] = useState([]);\r\n    const [decided, setDecided] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios.get(`/jobs/${job.id}/applicants`)\r\n            .then(applicantes => setApplicants(applicantes.data))\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    return (\r\n        <Popup trigger={<span style={{ color: brightness === 'bright' ? '#000' : '#fff', background: brightness === 'bright' ? '#fff' : '#000' }} id={style.editBtn}>Applicants</span>} modal>\r\n            {close => (\r\n                <div id={style.mainDiv}>\r\n                    {decided ? <Accepted decided={decided} projectName={projectName} /> : <ApplicantsList projectLogo={projectLogo} job={job} projectName={projectName} applicants={applicants} close={close} setApplicants={setApplicants} setDecided={setDecided} />}\r\n                </div>\r\n            )}\r\n        </Popup>\r\n    )\r\n}\r\n\r\nexport default ApplicantsPopUp","C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\Accepted.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\ApplicantsList.jsx",[],"C:\\Users\\User\\Henry\\finddevsfrontend\\src\\Components\\ApplicantsPopUp\\ChangeRole.jsx",[],{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":38,"column":8,"nodeType":"253","endLine":38,"endColumn":10,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":55,"column":26,"nodeType":"257","messageId":"258","endLine":55,"endColumn":27},{"ruleId":"259","severity":1,"message":"260","line":56,"column":72,"nodeType":"261","messageId":"262","endLine":60,"endColumn":22},{"ruleId":"263","severity":1,"message":"264","line":56,"column":79,"nodeType":"261","messageId":"265","endLine":56,"endColumn":81},{"ruleId":"255","severity":1,"message":"256","line":73,"column":26,"nodeType":"257","messageId":"258","endLine":73,"endColumn":27},{"ruleId":"255","severity":1,"message":"266","line":74,"column":30,"nodeType":"257","messageId":"258","endLine":74,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":78,"column":26,"nodeType":"257","messageId":"258","endLine":78,"endColumn":27},{"ruleId":"259","severity":1,"message":"260","line":79,"column":66,"nodeType":"261","messageId":"262","endLine":83,"endColumn":22},{"ruleId":"263","severity":1,"message":"264","line":79,"column":70,"nodeType":"261","messageId":"265","endLine":79,"endColumn":72},{"ruleId":"263","severity":1,"message":"267","line":93,"column":66,"nodeType":"261","messageId":"265","endLine":93,"endColumn":68},{"ruleId":"255","severity":1,"message":"268","line":110,"column":17,"nodeType":"257","messageId":"258","endLine":110,"endColumn":30},{"ruleId":"263","severity":1,"message":"267","line":110,"column":60,"nodeType":"261","messageId":"265","endLine":110,"endColumn":62},{"ruleId":"251","severity":1,"message":"269","line":44,"column":8,"nodeType":"253","endLine":44,"endColumn":10,"suggestions":"270"},{"ruleId":"271","severity":1,"message":"272","line":79,"column":47,"nodeType":"273","endLine":79,"endColumn":97},{"ruleId":"271","severity":1,"message":"272","line":115,"column":33,"nodeType":"273","endLine":115,"endColumn":68},{"ruleId":"251","severity":1,"message":"274","line":42,"column":8,"nodeType":"253","endLine":42,"endColumn":14,"suggestions":"275"},{"ruleId":"251","severity":1,"message":"276","line":51,"column":8,"nodeType":"253","endLine":51,"endColumn":10,"suggestions":"277"},{"ruleId":"278","severity":1,"message":"279","line":60,"column":54,"nodeType":"280","messageId":"281","endLine":60,"endColumn":55,"suggestions":"282"},{"ruleId":"278","severity":1,"message":"279","line":60,"column":107,"nodeType":"280","messageId":"281","endLine":60,"endColumn":108,"suggestions":"283"},{"ruleId":"251","severity":1,"message":"284","line":39,"column":8,"nodeType":"253","endLine":39,"endColumn":10,"suggestions":"285"},{"ruleId":"251","severity":1,"message":"274","line":38,"column":8,"nodeType":"253","endLine":38,"endColumn":10,"suggestions":"286"},{"ruleId":"251","severity":1,"message":"287","line":42,"column":8,"nodeType":"253","endLine":42,"endColumn":22,"suggestions":"288"},{"ruleId":"278","severity":1,"message":"279","line":51,"column":54,"nodeType":"280","messageId":"281","endLine":51,"endColumn":55,"suggestions":"289"},{"ruleId":"278","severity":1,"message":"279","line":51,"column":107,"nodeType":"280","messageId":"281","endLine":51,"endColumn":108,"suggestions":"290"},{"ruleId":"251","severity":1,"message":"274","line":43,"column":8,"nodeType":"253","endLine":43,"endColumn":10,"suggestions":"291"},{"ruleId":"292","severity":1,"message":"293","line":124,"column":41,"nodeType":"280","messageId":"294","endLine":126,"endColumn":60},{"ruleId":"251","severity":1,"message":"295","line":42,"column":8,"nodeType":"253","endLine":42,"endColumn":14,"suggestions":"296"},{"ruleId":"251","severity":1,"message":"297","line":24,"column":8,"nodeType":"253","endLine":24,"endColumn":15,"suggestions":"298"},{"ruleId":"299","severity":1,"message":"300","line":6,"column":43,"nodeType":"257","messageId":"301","endLine":6,"endColumn":60},{"ruleId":"251","severity":1,"message":"274","line":63,"column":8,"nodeType":"253","endLine":63,"endColumn":14,"suggestions":"302"},{"ruleId":"278","severity":1,"message":"303","line":90,"column":24,"nodeType":"280","messageId":"281","endLine":90,"endColumn":25,"suggestions":"304"},{"ruleId":"278","severity":1,"message":"279","line":94,"column":54,"nodeType":"280","messageId":"281","endLine":94,"endColumn":55,"suggestions":"305"},{"ruleId":"278","severity":1,"message":"279","line":94,"column":107,"nodeType":"280","messageId":"281","endLine":94,"endColumn":108,"suggestions":"306"},{"ruleId":"278","severity":1,"message":"303","line":20,"column":25,"nodeType":"280","messageId":"281","endLine":20,"endColumn":26,"suggestions":"307"},{"ruleId":"308","severity":1,"message":"309","line":84,"column":113,"nodeType":"310","endLine":84,"endColumn":145},{"ruleId":"251","severity":1,"message":"311","line":24,"column":8,"nodeType":"253","endLine":24,"endColumn":10,"suggestions":"312"},{"ruleId":"271","severity":1,"message":"272","line":13,"column":43,"nodeType":"273","endLine":13,"endColumn":93},{"ruleId":"251","severity":1,"message":"313","line":27,"column":8,"nodeType":"253","endLine":27,"endColumn":10,"suggestions":"314"},{"ruleId":"251","severity":1,"message":"284","line":24,"column":8,"nodeType":"253","endLine":24,"endColumn":10,"suggestions":"315"},{"ruleId":"251","severity":1,"message":"316","line":17,"column":8,"nodeType":"253","endLine":17,"endColumn":10,"suggestions":"317"},"no-native-reassign",["318"],"no-negated-in-lhs",["319"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getJobs', 'getNotifications', 'getUsers', 'setGlobalSkills', 'setProjects', and 'setUserInfo'. Either include them or remove the dependency array. If 'setGlobalSkills' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["320"],"no-redeclare","'i' is already defined.","Identifier","redeclared","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'j' is already defined.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'filteredArray' is already defined.","React Hook useEffect has missing dependencies: 'pathname.search' and 'username'. Either include them or remove the dependency array.",["321"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useLayoutEffect has a missing dependency: 'asyncUseEffect'. Either include it or remove the dependency array.",["322"],"React Hook useEffect has missing dependencies: 'asyncUseEffect', 'projectID', 'user.id', and 'user.username'. Either include them or remove the dependency array.",["323"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["324","325"],["326","327"],"React Hook useEffect has a missing dependency: 'projectID'. Either include it or remove the dependency array.",["328"],["329"],"React Hook useLayoutEffect has missing dependencies: 'asyncUseEffect' and 'user.username'. Either include them or remove the dependency array.",["330"],["331","332"],["333","334"],["335"],"no-multi-str","Multiline support is limited to browsers supporting ES5 only.","multilineString","React Hook useLayoutEffect has missing dependencies: 'asyncUseEffect' and 'jobID'. Either include them or remove the dependency array.",["336"],"React Hook useLayoutEffect has missing dependencies: 'pathname.search' and 'projects'. Either include them or remove the dependency array. If 'setSuggestions' needs the current value of 'pathname.search', you can also switch to useReducer instead of useState and read 'pathname.search' in the reducer.",["337"],"no-unused-vars","'CountryRegionData' is defined but never used.","unusedVar",["338"],"Unnecessary escape character: \\..",["339","340"],["341","342"],["343","344"],["345","346"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'user.skills'. Either include it or remove the dependency array. If 'setESL' needs the current value of 'user.skills', you can also switch to useReducer instead of useState and read 'user.skills' in the reducer.",["347"],"React Hook useEffect has a missing dependency: 'user.skills'. Either include it or remove the dependency array. If 'setExtraLength' needs the current value of 'user.skills', you can also switch to useReducer instead of useState and read 'user.skills' in the reducer.",["348"],["349"],"React Hook useEffect has a missing dependency: 'job.id'. Either include it or remove the dependency array.",["350"],"no-global-assign","no-unsafe-negation",{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"messageId":"359","fix":"360","desc":"361"},{"messageId":"362","fix":"363","desc":"364"},{"messageId":"359","fix":"365","desc":"361"},{"messageId":"362","fix":"366","desc":"364"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"messageId":"359","fix":"373","desc":"361"},{"messageId":"362","fix":"374","desc":"364"},{"messageId":"359","fix":"375","desc":"361"},{"messageId":"362","fix":"376","desc":"364"},{"desc":"369","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"355","fix":"382"},{"messageId":"359","fix":"383","desc":"361"},{"messageId":"362","fix":"384","desc":"364"},{"messageId":"359","fix":"385","desc":"361"},{"messageId":"362","fix":"386","desc":"364"},{"messageId":"359","fix":"387","desc":"361"},{"messageId":"362","fix":"388","desc":"364"},{"messageId":"359","fix":"389","desc":"361"},{"messageId":"362","fix":"390","desc":"364"},{"desc":"391","fix":"392"},{"desc":"391","fix":"393"},{"desc":"367","fix":"394"},{"desc":"395","fix":"396"},"Update the dependencies array to be: [getJobs, getNotifications, getUsers, setGlobalSkills, setProjects, setUserInfo]",{"range":"397","text":"398"},"Update the dependencies array to be: [pathname.search, username]",{"range":"399","text":"400"},"Update the dependencies array to be: [asyncUseEffect, user]",{"range":"401","text":"402"},"Update the dependencies array to be: [asyncUseEffect, projectID, user.id, user.username]",{"range":"403","text":"404"},"removeEscape",{"range":"405","text":"406"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"407","text":"408"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"409","text":"406"},{"range":"410","text":"408"},"Update the dependencies array to be: [projectID]",{"range":"411","text":"412"},"Update the dependencies array to be: [asyncUseEffect]",{"range":"413","text":"414"},"Update the dependencies array to be: [asyncUseEffect, limitOfPosts, user.username]",{"range":"415","text":"416"},{"range":"417","text":"406"},{"range":"418","text":"408"},{"range":"419","text":"406"},{"range":"420","text":"408"},{"range":"421","text":"414"},"Update the dependencies array to be: [asyncUseEffect, jobID, user]",{"range":"422","text":"423"},"Update the dependencies array to be: [pathname.search, projects, users]",{"range":"424","text":"425"},{"range":"426","text":"402"},{"range":"427","text":"406"},{"range":"428","text":"408"},{"range":"429","text":"406"},{"range":"430","text":"408"},{"range":"431","text":"406"},{"range":"432","text":"408"},{"range":"433","text":"406"},{"range":"434","text":"408"},"Update the dependencies array to be: [user.skills]",{"range":"435","text":"436"},{"range":"437","text":"436"},{"range":"438","text":"412"},"Update the dependencies array to be: [job.id]",{"range":"439","text":"440"},[1849,1851],"[getJobs, getNotifications, getUsers, setGlobalSkills, setProjects, setUserInfo]",[2275,2277],"[pathname.search, username]",[1801,1807],"[asyncUseEffect, user]",[2259,2261],"[asyncUseEffect, projectID, user.id, user.username]",[2674,2675],"",[2674,2674],"\\",[2727,2728],[2727,2727],[1416,1418],"[projectID]",[1620,1622],"[asyncUseEffect]",[1850,1864],"[asyncUseEffect, limitOfPosts, user.username]",[2277,2278],[2277,2277],[2330,2331],[2330,2330],[1798,1800],[1826,1832],"[asyncUseEffect, jobID, user]",[1051,1058],"[pathname.search, projects, users]",[2486,2492],[3452,3453],[3452,3452],[3792,3793],[3792,3792],[3845,3846],[3845,3845],[798,799],[798,798],[1002,1004],"[user.skills]",[1165,1167],[1021,1023],[630,632],"[job.id]"]